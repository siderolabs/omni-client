// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: omni/specs/omni.proto

package specs

import (
	reflect "reflect"
	sync "sync"

	machine "github.com/siderolabs/talos/pkg/machinery/api/machine"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigApplyStatus int32

const (
	ConfigApplyStatus_UNKNOWN ConfigApplyStatus = 0
	ConfigApplyStatus_PENDING ConfigApplyStatus = 1
	ConfigApplyStatus_APPLIED ConfigApplyStatus = 2
	ConfigApplyStatus_FAILED  ConfigApplyStatus = 3
)

// Enum value maps for ConfigApplyStatus.
var (
	ConfigApplyStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "APPLIED",
		3: "FAILED",
	}
	ConfigApplyStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"PENDING": 1,
		"APPLIED": 2,
		"FAILED":  3,
	}
)

func (x ConfigApplyStatus) Enum() *ConfigApplyStatus {
	p := new(ConfigApplyStatus)
	*p = x
	return p
}

func (x ConfigApplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigApplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[0].Descriptor()
}

func (ConfigApplyStatus) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[0]
}

func (x ConfigApplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigApplyStatus.Descriptor instead.
func (ConfigApplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{0}
}

// MachineSetPhaseSpec is machine set phase.
type MachineSetPhase int32

const (
	MachineSetPhase_Unknown       MachineSetPhase = 0
	MachineSetPhase_ScalingUp     MachineSetPhase = 1
	MachineSetPhase_ScalingDown   MachineSetPhase = 2
	MachineSetPhase_Running       MachineSetPhase = 3
	MachineSetPhase_Destroying    MachineSetPhase = 4
	MachineSetPhase_Failed        MachineSetPhase = 5
	MachineSetPhase_Reconfiguring MachineSetPhase = 6
)

// Enum value maps for MachineSetPhase.
var (
	MachineSetPhase_name = map[int32]string{
		0: "Unknown",
		1: "ScalingUp",
		2: "ScalingDown",
		3: "Running",
		4: "Destroying",
		5: "Failed",
		6: "Reconfiguring",
	}
	MachineSetPhase_value = map[string]int32{
		"Unknown":       0,
		"ScalingUp":     1,
		"ScalingDown":   2,
		"Running":       3,
		"Destroying":    4,
		"Failed":        5,
		"Reconfiguring": 6,
	}
)

func (x MachineSetPhase) Enum() *MachineSetPhase {
	p := new(MachineSetPhase)
	*p = x
	return p
}

func (x MachineSetPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineSetPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[1].Descriptor()
}

func (MachineSetPhase) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[1]
}

func (x MachineSetPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineSetPhase.Descriptor instead.
func (MachineSetPhase) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1}
}

type ConditionType int32

const (
	ConditionType_UnknownCondition    ConditionType = 0
	ConditionType_Etcd                ConditionType = 1
	ConditionType_WireguardConnection ConditionType = 2
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0: "UnknownCondition",
		1: "Etcd",
		2: "WireguardConnection",
	}
	ConditionType_value = map[string]int32{
		"UnknownCondition":    0,
		"Etcd":                1,
		"WireguardConnection": 2,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[2].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[2]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{2}
}

type MachineStatusSpec_Role int32

const (
	MachineStatusSpec_NONE          MachineStatusSpec_Role = 0
	MachineStatusSpec_CONTROL_PLANE MachineStatusSpec_Role = 1
	MachineStatusSpec_WORKER        MachineStatusSpec_Role = 2
)

// Enum value maps for MachineStatusSpec_Role.
var (
	MachineStatusSpec_Role_name = map[int32]string{
		0: "NONE",
		1: "CONTROL_PLANE",
		2: "WORKER",
	}
	MachineStatusSpec_Role_value = map[string]int32{
		"NONE":          0,
		"CONTROL_PLANE": 1,
		"WORKER":        2,
	}
)

func (x MachineStatusSpec_Role) Enum() *MachineStatusSpec_Role {
	p := new(MachineStatusSpec_Role)
	*p = x
	return p
}

func (x MachineStatusSpec_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineStatusSpec_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[3].Descriptor()
}

func (MachineStatusSpec_Role) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[3]
}

func (x MachineStatusSpec_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineStatusSpec_Role.Descriptor instead.
func (MachineStatusSpec_Role) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 0}
}

type EtcdBackupStatusSpec_Status int32

const (
	EtcdBackupStatusSpec_Unknown EtcdBackupStatusSpec_Status = 0
	EtcdBackupStatusSpec_Ok      EtcdBackupStatusSpec_Status = 1
	EtcdBackupStatusSpec_Error   EtcdBackupStatusSpec_Status = 2
	EtcdBackupStatusSpec_Running EtcdBackupStatusSpec_Status = 3
)

// Enum value maps for EtcdBackupStatusSpec_Status.
var (
	EtcdBackupStatusSpec_Status_name = map[int32]string{
		0: "Unknown",
		1: "Ok",
		2: "Error",
		3: "Running",
	}
	EtcdBackupStatusSpec_Status_value = map[string]int32{
		"Unknown": 0,
		"Ok":      1,
		"Error":   2,
		"Running": 3,
	}
)

func (x EtcdBackupStatusSpec_Status) Enum() *EtcdBackupStatusSpec_Status {
	p := new(EtcdBackupStatusSpec_Status)
	*p = x
	return p
}

func (x EtcdBackupStatusSpec_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EtcdBackupStatusSpec_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[4].Descriptor()
}

func (EtcdBackupStatusSpec_Status) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[4]
}

func (x EtcdBackupStatusSpec_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EtcdBackupStatusSpec_Status.Descriptor instead.
func (EtcdBackupStatusSpec_Status) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{10, 0}
}

type ClusterMachineStatusSpec_Stage int32

const (
	ClusterMachineStatusSpec_UNKNOWN        ClusterMachineStatusSpec_Stage = 0
	ClusterMachineStatusSpec_BOOTING        ClusterMachineStatusSpec_Stage = 1
	ClusterMachineStatusSpec_INSTALLING     ClusterMachineStatusSpec_Stage = 2
	ClusterMachineStatusSpec_UPGRADING      ClusterMachineStatusSpec_Stage = 6
	ClusterMachineStatusSpec_CONFIGURING    ClusterMachineStatusSpec_Stage = 3
	ClusterMachineStatusSpec_RUNNING        ClusterMachineStatusSpec_Stage = 4
	ClusterMachineStatusSpec_REBOOTING      ClusterMachineStatusSpec_Stage = 7
	ClusterMachineStatusSpec_SHUTTING_DOWN  ClusterMachineStatusSpec_Stage = 8
	ClusterMachineStatusSpec_BEFORE_DESTROY ClusterMachineStatusSpec_Stage = 9
	ClusterMachineStatusSpec_DESTROYING     ClusterMachineStatusSpec_Stage = 5
)

// Enum value maps for ClusterMachineStatusSpec_Stage.
var (
	ClusterMachineStatusSpec_Stage_name = map[int32]string{
		0: "UNKNOWN",
		1: "BOOTING",
		2: "INSTALLING",
		6: "UPGRADING",
		3: "CONFIGURING",
		4: "RUNNING",
		7: "REBOOTING",
		8: "SHUTTING_DOWN",
		9: "BEFORE_DESTROY",
		5: "DESTROYING",
	}
	ClusterMachineStatusSpec_Stage_value = map[string]int32{
		"UNKNOWN":        0,
		"BOOTING":        1,
		"INSTALLING":     2,
		"UPGRADING":      6,
		"CONFIGURING":    3,
		"RUNNING":        4,
		"REBOOTING":      7,
		"SHUTTING_DOWN":  8,
		"BEFORE_DESTROY": 9,
		"DESTROYING":     5,
	}
)

func (x ClusterMachineStatusSpec_Stage) Enum() *ClusterMachineStatusSpec_Stage {
	p := new(ClusterMachineStatusSpec_Stage)
	*p = x
	return p
}

func (x ClusterMachineStatusSpec_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterMachineStatusSpec_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[5].Descriptor()
}

func (ClusterMachineStatusSpec_Stage) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[5]
}

func (x ClusterMachineStatusSpec_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterMachineStatusSpec_Stage.Descriptor instead.
func (ClusterMachineStatusSpec_Stage) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{21, 0}
}

type ClusterStatusSpec_Phase int32

const (
	ClusterStatusSpec_UNKNOWN      ClusterStatusSpec_Phase = 0
	ClusterStatusSpec_SCALING_UP   ClusterStatusSpec_Phase = 1
	ClusterStatusSpec_SCALING_DOWN ClusterStatusSpec_Phase = 2
	ClusterStatusSpec_RUNNING      ClusterStatusSpec_Phase = 3
	ClusterStatusSpec_DESTROYING   ClusterStatusSpec_Phase = 4
)

// Enum value maps for ClusterStatusSpec_Phase.
var (
	ClusterStatusSpec_Phase_name = map[int32]string{
		0: "UNKNOWN",
		1: "SCALING_UP",
		2: "SCALING_DOWN",
		3: "RUNNING",
		4: "DESTROYING",
	}
	ClusterStatusSpec_Phase_value = map[string]int32{
		"UNKNOWN":      0,
		"SCALING_UP":   1,
		"SCALING_DOWN": 2,
		"RUNNING":      3,
		"DESTROYING":   4,
	}
)

func (x ClusterStatusSpec_Phase) Enum() *ClusterStatusSpec_Phase {
	p := new(ClusterStatusSpec_Phase)
	*p = x
	return p
}

func (x ClusterStatusSpec_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterStatusSpec_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[6].Descriptor()
}

func (ClusterStatusSpec_Phase) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[6]
}

func (x ClusterStatusSpec_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterStatusSpec_Phase.Descriptor instead.
func (ClusterStatusSpec_Phase) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{23, 0}
}

type MachineSetSpec_UpdateStrategy int32

const (
	MachineSetSpec_Unset   MachineSetSpec_UpdateStrategy = 0
	MachineSetSpec_Rolling MachineSetSpec_UpdateStrategy = 1
)

// Enum value maps for MachineSetSpec_UpdateStrategy.
var (
	MachineSetSpec_UpdateStrategy_name = map[int32]string{
		0: "Unset",
		1: "Rolling",
	}
	MachineSetSpec_UpdateStrategy_value = map[string]int32{
		"Unset":   0,
		"Rolling": 1,
	}
)

func (x MachineSetSpec_UpdateStrategy) Enum() *MachineSetSpec_UpdateStrategy {
	p := new(MachineSetSpec_UpdateStrategy)
	*p = x
	return p
}

func (x MachineSetSpec_UpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineSetSpec_UpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[7].Descriptor()
}

func (MachineSetSpec_UpdateStrategy) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[7]
}

func (x MachineSetSpec_UpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineSetSpec_UpdateStrategy.Descriptor instead.
func (MachineSetSpec_UpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{35, 0}
}

type MachineSetSpec_MachineClass_AllocationType int32

const (
	// Static uses the count defined in the count field.
	MachineSetSpec_MachineClass_Static MachineSetSpec_MachineClass_AllocationType = 0
	// Unlimited allocates all available machines from the machine class.
	MachineSetSpec_MachineClass_Unlimited MachineSetSpec_MachineClass_AllocationType = 1
)

// Enum value maps for MachineSetSpec_MachineClass_AllocationType.
var (
	MachineSetSpec_MachineClass_AllocationType_name = map[int32]string{
		0: "Static",
		1: "Unlimited",
	}
	MachineSetSpec_MachineClass_AllocationType_value = map[string]int32{
		"Static":    0,
		"Unlimited": 1,
	}
)

func (x MachineSetSpec_MachineClass_AllocationType) Enum() *MachineSetSpec_MachineClass_AllocationType {
	p := new(MachineSetSpec_MachineClass_AllocationType)
	*p = x
	return p
}

func (x MachineSetSpec_MachineClass_AllocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineSetSpec_MachineClass_AllocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[8].Descriptor()
}

func (MachineSetSpec_MachineClass_AllocationType) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[8]
}

func (x MachineSetSpec_MachineClass_AllocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MachineSetSpec_MachineClass_AllocationType.Descriptor instead.
func (MachineSetSpec_MachineClass_AllocationType) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{35, 0, 0}
}

type TalosUpgradeStatusSpec_Phase int32

const (
	TalosUpgradeStatusSpec_Unknown   TalosUpgradeStatusSpec_Phase = 0
	TalosUpgradeStatusSpec_Upgrading TalosUpgradeStatusSpec_Phase = 1
	TalosUpgradeStatusSpec_Done      TalosUpgradeStatusSpec_Phase = 2
	TalosUpgradeStatusSpec_Failed    TalosUpgradeStatusSpec_Phase = 3
	TalosUpgradeStatusSpec_Reverting TalosUpgradeStatusSpec_Phase = 4
)

// Enum value maps for TalosUpgradeStatusSpec_Phase.
var (
	TalosUpgradeStatusSpec_Phase_name = map[int32]string{
		0: "Unknown",
		1: "Upgrading",
		2: "Done",
		3: "Failed",
		4: "Reverting",
	}
	TalosUpgradeStatusSpec_Phase_value = map[string]int32{
		"Unknown":   0,
		"Upgrading": 1,
		"Done":      2,
		"Failed":    3,
		"Reverting": 4,
	}
)

func (x TalosUpgradeStatusSpec_Phase) Enum() *TalosUpgradeStatusSpec_Phase {
	p := new(TalosUpgradeStatusSpec_Phase)
	*p = x
	return p
}

func (x TalosUpgradeStatusSpec_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TalosUpgradeStatusSpec_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[9].Descriptor()
}

func (TalosUpgradeStatusSpec_Phase) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[9]
}

func (x TalosUpgradeStatusSpec_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TalosUpgradeStatusSpec_Phase.Descriptor instead.
func (TalosUpgradeStatusSpec_Phase) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{36, 0}
}

type ControlPlaneStatusSpec_Condition_Status int32

const (
	ControlPlaneStatusSpec_Condition_Unknown  ControlPlaneStatusSpec_Condition_Status = 0
	ControlPlaneStatusSpec_Condition_Ready    ControlPlaneStatusSpec_Condition_Status = 1
	ControlPlaneStatusSpec_Condition_NotReady ControlPlaneStatusSpec_Condition_Status = 2
)

// Enum value maps for ControlPlaneStatusSpec_Condition_Status.
var (
	ControlPlaneStatusSpec_Condition_Status_name = map[int32]string{
		0: "Unknown",
		1: "Ready",
		2: "NotReady",
	}
	ControlPlaneStatusSpec_Condition_Status_value = map[string]int32{
		"Unknown":  0,
		"Ready":    1,
		"NotReady": 2,
	}
)

func (x ControlPlaneStatusSpec_Condition_Status) Enum() *ControlPlaneStatusSpec_Condition_Status {
	p := new(ControlPlaneStatusSpec_Condition_Status)
	*p = x
	return p
}

func (x ControlPlaneStatusSpec_Condition_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlPlaneStatusSpec_Condition_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[10].Descriptor()
}

func (ControlPlaneStatusSpec_Condition_Status) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[10]
}

func (x ControlPlaneStatusSpec_Condition_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlPlaneStatusSpec_Condition_Status.Descriptor instead.
func (ControlPlaneStatusSpec_Condition_Status) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{41, 0, 0}
}

type ControlPlaneStatusSpec_Condition_Severity int32

const (
	ControlPlaneStatusSpec_Condition_Info    ControlPlaneStatusSpec_Condition_Severity = 0
	ControlPlaneStatusSpec_Condition_Warning ControlPlaneStatusSpec_Condition_Severity = 1
	ControlPlaneStatusSpec_Condition_Error   ControlPlaneStatusSpec_Condition_Severity = 2
)

// Enum value maps for ControlPlaneStatusSpec_Condition_Severity.
var (
	ControlPlaneStatusSpec_Condition_Severity_name = map[int32]string{
		0: "Info",
		1: "Warning",
		2: "Error",
	}
	ControlPlaneStatusSpec_Condition_Severity_value = map[string]int32{
		"Info":    0,
		"Warning": 1,
		"Error":   2,
	}
)

func (x ControlPlaneStatusSpec_Condition_Severity) Enum() *ControlPlaneStatusSpec_Condition_Severity {
	p := new(ControlPlaneStatusSpec_Condition_Severity)
	*p = x
	return p
}

func (x ControlPlaneStatusSpec_Condition_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlPlaneStatusSpec_Condition_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[11].Descriptor()
}

func (ControlPlaneStatusSpec_Condition_Severity) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[11]
}

func (x ControlPlaneStatusSpec_Condition_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlPlaneStatusSpec_Condition_Severity.Descriptor instead.
func (ControlPlaneStatusSpec_Condition_Severity) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{41, 0, 1}
}

type KubernetesUpgradeStatusSpec_Phase int32

const (
	KubernetesUpgradeStatusSpec_Unknown   KubernetesUpgradeStatusSpec_Phase = 0
	KubernetesUpgradeStatusSpec_Upgrading KubernetesUpgradeStatusSpec_Phase = 1
	KubernetesUpgradeStatusSpec_Done      KubernetesUpgradeStatusSpec_Phase = 2
	KubernetesUpgradeStatusSpec_Failed    KubernetesUpgradeStatusSpec_Phase = 3
	KubernetesUpgradeStatusSpec_Reverting KubernetesUpgradeStatusSpec_Phase = 4
)

// Enum value maps for KubernetesUpgradeStatusSpec_Phase.
var (
	KubernetesUpgradeStatusSpec_Phase_name = map[int32]string{
		0: "Unknown",
		1: "Upgrading",
		2: "Done",
		3: "Failed",
		4: "Reverting",
	}
	KubernetesUpgradeStatusSpec_Phase_value = map[string]int32{
		"Unknown":   0,
		"Upgrading": 1,
		"Done":      2,
		"Failed":    3,
		"Reverting": 4,
	}
)

func (x KubernetesUpgradeStatusSpec_Phase) Enum() *KubernetesUpgradeStatusSpec_Phase {
	p := new(KubernetesUpgradeStatusSpec_Phase)
	*p = x
	return p
}

func (x KubernetesUpgradeStatusSpec_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesUpgradeStatusSpec_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_omni_specs_omni_proto_enumTypes[12].Descriptor()
}

func (KubernetesUpgradeStatusSpec_Phase) Type() protoreflect.EnumType {
	return &file_omni_specs_omni_proto_enumTypes[12]
}

func (x KubernetesUpgradeStatusSpec_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesUpgradeStatusSpec_Phase.Descriptor instead.
func (KubernetesUpgradeStatusSpec_Phase) EnumDescriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{44, 0}
}

// MachineSpec describes a Machine.
type MachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP which can be used to access Talos API.
	ManagementAddress string `protobuf:"bytes,1,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	// Connected is copied from the corresponding Link resource.
	Connected bool `protobuf:"varint,2,opt,name=connected,proto3" json:"connected,omitempty"`
}

func (x *MachineSpec) Reset() {
	*x = MachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSpec) ProtoMessage() {}

func (x *MachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSpec.ProtoReflect.Descriptor instead.
func (*MachineSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{0}
}

func (x *MachineSpec) GetManagementAddress() string {
	if x != nil {
		return x.ManagementAddress
	}
	return ""
}

func (x *MachineSpec) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

// MachineStatusSpec describes state of a Machine.
type MachineStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Talos version.
	TalosVersion string `protobuf:"bytes,1,opt,name=talos_version,json=talosVersion,proto3" json:"talos_version,omitempty"`
	// Hardware-related information.
	Hardware *MachineStatusSpec_HardwareStatus `protobuf:"bytes,2,opt,name=hardware,proto3" json:"hardware,omitempty"`
	// Network-related information.
	Network *MachineStatusSpec_NetworkStatus `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	// Set if the last poll resulted in an error.
	LastError string `protobuf:"bytes,4,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// Management address is copied from the machine resource.
	ManagementAddress string `protobuf:"bytes,5,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	// Connected is copied from the corresponding Link resource.
	Connected bool `protobuf:"varint,6,opt,name=connected,proto3" json:"connected,omitempty"`
	// Maintenance flag means that the node is running in the maintenance mode.
	Maintenance bool `protobuf:"varint,7,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
	// Cluster is the name of the cluster the machine belongs to.
	Cluster string `protobuf:"bytes,9,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Role is the role of the machine in the cluster.
	Role MachineStatusSpec_Role `protobuf:"varint,10,opt,name=role,proto3,enum=specs.MachineStatusSpec_Role" json:"role,omitempty"`
	// Platform-specific information.
	PlatformMetadata *MachineStatusSpec_PlatformMetadata `protobuf:"bytes,11,opt,name=platform_metadata,json=platformMetadata,proto3" json:"platform_metadata,omitempty"`
	ImageLabels      map[string]string                   `protobuf:"bytes,13,rep,name=image_labels,json=imageLabels,proto3" json:"image_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MachineStatusSpec) Reset() {
	*x = MachineStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec) ProtoMessage() {}

func (x *MachineStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1}
}

func (x *MachineStatusSpec) GetTalosVersion() string {
	if x != nil {
		return x.TalosVersion
	}
	return ""
}

func (x *MachineStatusSpec) GetHardware() *MachineStatusSpec_HardwareStatus {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *MachineStatusSpec) GetNetwork() *MachineStatusSpec_NetworkStatus {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *MachineStatusSpec) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *MachineStatusSpec) GetManagementAddress() string {
	if x != nil {
		return x.ManagementAddress
	}
	return ""
}

func (x *MachineStatusSpec) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *MachineStatusSpec) GetMaintenance() bool {
	if x != nil {
		return x.Maintenance
	}
	return false
}

func (x *MachineStatusSpec) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MachineStatusSpec) GetRole() MachineStatusSpec_Role {
	if x != nil {
		return x.Role
	}
	return MachineStatusSpec_NONE
}

func (x *MachineStatusSpec) GetPlatformMetadata() *MachineStatusSpec_PlatformMetadata {
	if x != nil {
		return x.PlatformMetadata
	}
	return nil
}

func (x *MachineStatusSpec) GetImageLabels() map[string]string {
	if x != nil {
		return x.ImageLabels
	}
	return nil
}

// TalosConfigSpec describes a Talos cluster config.
type TalosConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ca certificate authority.
	Ca string `protobuf:"bytes,1,opt,name=ca,proto3" json:"ca,omitempty"`
	// Crt certificate.
	Crt string `protobuf:"bytes,2,opt,name=crt,proto3" json:"crt,omitempty"`
	// Key certificate key.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TalosConfigSpec) Reset() {
	*x = TalosConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalosConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalosConfigSpec) ProtoMessage() {}

func (x *TalosConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalosConfigSpec.ProtoReflect.Descriptor instead.
func (*TalosConfigSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{2}
}

func (x *TalosConfigSpec) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *TalosConfigSpec) GetCrt() string {
	if x != nil {
		return x.Crt
	}
	return ""
}

func (x *TalosConfigSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Cluster describes a Talos cluster.
type ClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstallImage the installer image to use.
	//
	// Deprecated: Marked as deprecated in omni/specs/omni.proto.
	InstallImage string `protobuf:"bytes,1,opt,name=install_image,json=installImage,proto3" json:"install_image,omitempty"`
	// KubernetesVersion to use on the node.
	KubernetesVersion string `protobuf:"bytes,2,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// TalosVersion cluster wide Talos version.
	TalosVersion string `protobuf:"bytes,3,opt,name=talos_version,json=talosVersion,proto3" json:"talos_version,omitempty"`
	// Features are the cluster features.
	Features *ClusterSpec_Features `protobuf:"bytes,4,opt,name=features,proto3" json:"features,omitempty"`
	// Backup describes the backup configuration. If it set to null that means that backups are disabled for this cluster.
	BackupConfiguration *EtcdBackupConf `protobuf:"bytes,5,opt,name=backup_configuration,json=backupConfiguration,proto3" json:"backup_configuration,omitempty"`
}

func (x *ClusterSpec) Reset() {
	*x = ClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpec) ProtoMessage() {}

func (x *ClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpec.ProtoReflect.Descriptor instead.
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in omni/specs/omni.proto.
func (x *ClusterSpec) GetInstallImage() string {
	if x != nil {
		return x.InstallImage
	}
	return ""
}

func (x *ClusterSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *ClusterSpec) GetTalosVersion() string {
	if x != nil {
		return x.TalosVersion
	}
	return ""
}

func (x *ClusterSpec) GetFeatures() *ClusterSpec_Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ClusterSpec) GetBackupConfiguration() *EtcdBackupConf {
	if x != nil {
		return x.BackupConfiguration
	}
	return nil
}

// EtcdBackupConf describes the backup configuration.
type EtcdBackupConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interval is the interval between backups. If not set, backups are disabled.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Enabled etcd backups.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *EtcdBackupConf) Reset() {
	*x = EtcdBackupConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupConf) ProtoMessage() {}

func (x *EtcdBackupConf) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupConf.ProtoReflect.Descriptor instead.
func (*EtcdBackupConf) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{4}
}

func (x *EtcdBackupConf) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *EtcdBackupConf) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// EtcdBackupEncryptionSpec describes the backup encryption.
type EtcdBackupEncryptionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionKey []byte `protobuf:"bytes,1,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
}

func (x *EtcdBackupEncryptionSpec) Reset() {
	*x = EtcdBackupEncryptionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupEncryptionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupEncryptionSpec) ProtoMessage() {}

func (x *EtcdBackupEncryptionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupEncryptionSpec.ProtoReflect.Descriptor instead.
func (*EtcdBackupEncryptionSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{5}
}

func (x *EtcdBackupEncryptionSpec) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

// EtcdBackupHeader describes the backup header.
type EtcdBackupHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version is the version of the backup creator.
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EtcdBackupHeader) Reset() {
	*x = EtcdBackupHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupHeader) ProtoMessage() {}

func (x *EtcdBackupHeader) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupHeader.ProtoReflect.Descriptor instead.
func (*EtcdBackupHeader) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{6}
}

func (x *EtcdBackupHeader) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// EtcdBackupSpec describes the backup.
type EtcdBackupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CreatedAt is the time when the backup was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Snapshot is the snapshot file name.
	Snapshot string `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// Size specifies the etcd backup size.
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *EtcdBackupSpec) Reset() {
	*x = EtcdBackupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupSpec) ProtoMessage() {}

func (x *EtcdBackupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupSpec.ProtoReflect.Descriptor instead.
func (*EtcdBackupSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{7}
}

func (x *EtcdBackupSpec) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EtcdBackupSpec) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *EtcdBackupSpec) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// BackupDataSpec describes the data needed for etcd backup.
type BackupDataSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval                  *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	ClusterUuid               string               `protobuf:"bytes,2,opt,name=cluster_uuid,json=clusterUuid,proto3" json:"cluster_uuid,omitempty"`
	EncryptionKey             []byte               `protobuf:"bytes,3,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	AesCbcEncryptionSecret    string               `protobuf:"bytes,4,opt,name=aes_cbc_encryption_secret,json=aesCbcEncryptionSecret,proto3" json:"aes_cbc_encryption_secret,omitempty"`
	SecretboxEncryptionSecret string               `protobuf:"bytes,5,opt,name=secretbox_encryption_secret,json=secretboxEncryptionSecret,proto3" json:"secretbox_encryption_secret,omitempty"`
}

func (x *BackupDataSpec) Reset() {
	*x = BackupDataSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDataSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDataSpec) ProtoMessage() {}

func (x *BackupDataSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDataSpec.ProtoReflect.Descriptor instead.
func (*BackupDataSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{8}
}

func (x *BackupDataSpec) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *BackupDataSpec) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *BackupDataSpec) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *BackupDataSpec) GetAesCbcEncryptionSecret() string {
	if x != nil {
		return x.AesCbcEncryptionSecret
	}
	return ""
}

func (x *BackupDataSpec) GetSecretboxEncryptionSecret() string {
	if x != nil {
		return x.SecretboxEncryptionSecret
	}
	return ""
}

// EtcdBackupS3ConfSpec describes the S3 configuration for the backup process.
type EtcdBackupS3ConfSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket          string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region          string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Endpoint        string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string `protobuf:"bytes,4,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string `protobuf:"bytes,5,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	SessionToken    string `protobuf:"bytes,6,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *EtcdBackupS3ConfSpec) Reset() {
	*x = EtcdBackupS3ConfSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupS3ConfSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupS3ConfSpec) ProtoMessage() {}

func (x *EtcdBackupS3ConfSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupS3ConfSpec.ProtoReflect.Descriptor instead.
func (*EtcdBackupS3ConfSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{9}
}

func (x *EtcdBackupS3ConfSpec) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *EtcdBackupS3ConfSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EtcdBackupS3ConfSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *EtcdBackupS3ConfSpec) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *EtcdBackupS3ConfSpec) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *EtcdBackupS3ConfSpec) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// EtcdBackupStatus describes cluster last backup status.
type EtcdBackupStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status is the status of the last backup.
	Status EtcdBackupStatusSpec_Status `protobuf:"varint,1,opt,name=status,proto3,enum=specs.EtcdBackupStatusSpec_Status" json:"status,omitempty"`
	// Error is the error message if the backup failed.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// LastBackupTime is the time of the last backup.
	LastBackupTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_backup_time,json=lastBackupTime,proto3" json:"last_backup_time,omitempty"`
	// LastBackupAttempt is the time of the last backup attempt.
	LastBackupAttempt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_backup_attempt,json=lastBackupAttempt,proto3" json:"last_backup_attempt,omitempty"`
}

func (x *EtcdBackupStatusSpec) Reset() {
	*x = EtcdBackupStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupStatusSpec) ProtoMessage() {}

func (x *EtcdBackupStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupStatusSpec.ProtoReflect.Descriptor instead.
func (*EtcdBackupStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{10}
}

func (x *EtcdBackupStatusSpec) GetStatus() EtcdBackupStatusSpec_Status {
	if x != nil {
		return x.Status
	}
	return EtcdBackupStatusSpec_Unknown
}

func (x *EtcdBackupStatusSpec) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EtcdBackupStatusSpec) GetLastBackupTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBackupTime
	}
	return nil
}

func (x *EtcdBackupStatusSpec) GetLastBackupAttempt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBackupAttempt
	}
	return nil
}

// EtcdManualBackupSpec describes the manual backup request.
type EtcdManualBackupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BackupAt is the time when the backup should be created.
	BackupAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=backup_at,json=backupAt,proto3" json:"backup_at,omitempty"`
}

func (x *EtcdManualBackupSpec) Reset() {
	*x = EtcdManualBackupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdManualBackupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdManualBackupSpec) ProtoMessage() {}

func (x *EtcdManualBackupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdManualBackupSpec.ProtoReflect.Descriptor instead.
func (*EtcdManualBackupSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{11}
}

func (x *EtcdManualBackupSpec) GetBackupAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BackupAt
	}
	return nil
}

// EtcdBackupStoreStatusSpec is internal resource that decribes store configuration name and configuration last error.
type EtcdBackupStoreStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConfigurationName is the name of the configuration (disabled|local|s3).
	ConfigurationName string `protobuf:"bytes,1,opt,name=configuration_name,json=configurationName,proto3" json:"configuration_name,omitempty"`
	// ConfigurationError is the error message if the configuration is invalid.
	ConfigurationError string `protobuf:"bytes,2,opt,name=configuration_error,json=configurationError,proto3" json:"configuration_error,omitempty"`
}

func (x *EtcdBackupStoreStatusSpec) Reset() {
	*x = EtcdBackupStoreStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupStoreStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupStoreStatusSpec) ProtoMessage() {}

func (x *EtcdBackupStoreStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupStoreStatusSpec.ProtoReflect.Descriptor instead.
func (*EtcdBackupStoreStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{12}
}

func (x *EtcdBackupStoreStatusSpec) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *EtcdBackupStoreStatusSpec) GetConfigurationError() string {
	if x != nil {
		return x.ConfigurationError
	}
	return ""
}

// EtcdBackupOverallStatusSpec describes the overall etcd backup system status.
type EtcdBackupOverallStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConfigurationName is the name of the configuration (disabled|local|s3).
	ConfigurationName string `protobuf:"bytes,1,opt,name=configuration_name,json=configurationName,proto3" json:"configuration_name,omitempty"`
	// ConfigurationError is the error message if the configuration is invalid.
	ConfigurationError string `protobuf:"bytes,2,opt,name=configuration_error,json=configurationError,proto3" json:"configuration_error,omitempty"`
	// LastBackupStatus is the status of the last backup.
	LastBackupStatus *EtcdBackupStatusSpec `protobuf:"bytes,3,opt,name=last_backup_status,json=lastBackupStatus,proto3" json:"last_backup_status,omitempty"`
}

func (x *EtcdBackupOverallStatusSpec) Reset() {
	*x = EtcdBackupOverallStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupOverallStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupOverallStatusSpec) ProtoMessage() {}

func (x *EtcdBackupOverallStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupOverallStatusSpec.ProtoReflect.Descriptor instead.
func (*EtcdBackupOverallStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{13}
}

func (x *EtcdBackupOverallStatusSpec) GetConfigurationName() string {
	if x != nil {
		return x.ConfigurationName
	}
	return ""
}

func (x *EtcdBackupOverallStatusSpec) GetConfigurationError() string {
	if x != nil {
		return x.ConfigurationError
	}
	return ""
}

func (x *EtcdBackupOverallStatusSpec) GetLastBackupStatus() *EtcdBackupStatusSpec {
	if x != nil {
		return x.LastBackupStatus
	}
	return nil
}

// ClusterMachineSpec describes a machine attached to a Cluster.
type ClusterMachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KubernetesVersion to use on the machine (copied from Cluster at the moment of creation).
	KubernetesVersion string `protobuf:"bytes,2,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
}

func (x *ClusterMachineSpec) Reset() {
	*x = ClusterMachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineSpec) ProtoMessage() {}

func (x *ClusterMachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterMachineSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

// ClusterMachineConfigPatchesSpec keeps the list of config patches to be applied on the machine.
type ClusterMachineConfigPatchesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of patches combined from all sources, as a final list of patches to apply.
	Patches []string `protobuf:"bytes,1,rep,name=patches,proto3" json:"patches,omitempty"`
}

func (x *ClusterMachineConfigPatchesSpec) Reset() {
	*x = ClusterMachineConfigPatchesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineConfigPatchesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineConfigPatchesSpec) ProtoMessage() {}

func (x *ClusterMachineConfigPatchesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineConfigPatchesSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineConfigPatchesSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterMachineConfigPatchesSpec) GetPatches() []string {
	if x != nil {
		return x.Patches
	}
	return nil
}

// ClsuterMachineTalosVersionSpec describes a machine Talos version.
type ClusterMachineTalosVersionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClusterMachineTalosVersionSpec) Reset() {
	*x = ClusterMachineTalosVersionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineTalosVersionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineTalosVersionSpec) ProtoMessage() {}

func (x *ClusterMachineTalosVersionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineTalosVersionSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineTalosVersionSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterMachineTalosVersionSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ClusterMachineConfigSpec stores generated Talos node machine config.
type ClusterMachineConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                  []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ClusterMachineVersion string `protobuf:"bytes,2,opt,name=cluster_machine_version,json=clusterMachineVersion,proto3" json:"cluster_machine_version,omitempty"`
	GenerationError       string `protobuf:"bytes,3,opt,name=generation_error,json=generationError,proto3" json:"generation_error,omitempty"`
}

func (x *ClusterMachineConfigSpec) Reset() {
	*x = ClusterMachineConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineConfigSpec) ProtoMessage() {}

func (x *ClusterMachineConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineConfigSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineConfigSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{17}
}

func (x *ClusterMachineConfigSpec) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClusterMachineConfigSpec) GetClusterMachineVersion() string {
	if x != nil {
		return x.ClusterMachineVersion
	}
	return ""
}

func (x *ClusterMachineConfigSpec) GetGenerationError() string {
	if x != nil {
		return x.GenerationError
	}
	return ""
}

// ClusterMachineConfigSpec stores generated Talos node machine config.
type RedactedClusterMachineConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RedactedClusterMachineConfigSpec) Reset() {
	*x = RedactedClusterMachineConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactedClusterMachineConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactedClusterMachineConfigSpec) ProtoMessage() {}

func (x *RedactedClusterMachineConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactedClusterMachineConfigSpec.ProtoReflect.Descriptor instead.
func (*RedactedClusterMachineConfigSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{18}
}

func (x *RedactedClusterMachineConfigSpec) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// ClusterMachineIdentity keeps ClusterMachine related node information.
type ClusterMachineIdentitySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeIdentity is Talos node identity from Identity resource.
	NodeIdentity string `protobuf:"bytes,1,opt,name=node_identity,json=nodeIdentity,proto3" json:"node_identity,omitempty"`
	// EtcdMemberId is the id of the node how it's represented in the etcd quorum.
	EtcdMemberId uint64 `protobuf:"varint,2,opt,name=etcd_member_id,json=etcdMemberId,proto3" json:"etcd_member_id,omitempty"`
	// Nodename is the Kubernetes node name.
	Nodename string `protobuf:"bytes,3,opt,name=nodename,proto3" json:"nodename,omitempty"`
	// NodeIps are the IPs of the Kubernetes node.
	NodeIps []string `protobuf:"bytes,8,rep,name=node_ips,json=nodeIps,proto3" json:"node_ips,omitempty"`
}

func (x *ClusterMachineIdentitySpec) Reset() {
	*x = ClusterMachineIdentitySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineIdentitySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineIdentitySpec) ProtoMessage() {}

func (x *ClusterMachineIdentitySpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineIdentitySpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineIdentitySpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterMachineIdentitySpec) GetNodeIdentity() string {
	if x != nil {
		return x.NodeIdentity
	}
	return ""
}

func (x *ClusterMachineIdentitySpec) GetEtcdMemberId() uint64 {
	if x != nil {
		return x.EtcdMemberId
	}
	return 0
}

func (x *ClusterMachineIdentitySpec) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *ClusterMachineIdentitySpec) GetNodeIps() []string {
	if x != nil {
		return x.NodeIps
	}
	return nil
}

// ClusterMachineTemplateSpec
type ClusterMachineTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstallImage the installer image to use.
	InstallImage string `protobuf:"bytes,1,opt,name=install_image,json=installImage,proto3" json:"install_image,omitempty"`
	// KubernetesVersion to use on the node.
	KubernetesVersion string `protobuf:"bytes,2,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// InstallDisk Talos system disk.
	InstallDisk string `protobuf:"bytes,3,opt,name=install_disk,json=installDisk,proto3" json:"install_disk,omitempty"`
	// Patch represents machinery config patch.
	Patch string `protobuf:"bytes,5,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *ClusterMachineTemplateSpec) Reset() {
	*x = ClusterMachineTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineTemplateSpec) ProtoMessage() {}

func (x *ClusterMachineTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineTemplateSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineTemplateSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterMachineTemplateSpec) GetInstallImage() string {
	if x != nil {
		return x.InstallImage
	}
	return ""
}

func (x *ClusterMachineTemplateSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *ClusterMachineTemplateSpec) GetInstallDisk() string {
	if x != nil {
		return x.InstallDisk
	}
	return ""
}

func (x *ClusterMachineTemplateSpec) GetPatch() string {
	if x != nil {
		return x.Patch
	}
	return ""
}

// ClusterMachineStatusSpec
type ClusterMachineStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ready is true if all services are healthy.
	Ready bool                           `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	Stage ClusterMachineStatusSpec_Stage `protobuf:"varint,2,opt,name=stage,proto3,enum=specs.ClusterMachineStatusSpec_Stage" json:"stage,omitempty"`
	// ApidAvailable is true if the node is a control plane node and the apid service is healthy.
	ApidAvailable   bool   `protobuf:"varint,3,opt,name=apid_available,json=apidAvailable,proto3" json:"apid_available,omitempty"`
	ConfigUpToDate  bool   `protobuf:"varint,4,opt,name=config_up_to_date,json=configUpToDate,proto3" json:"config_up_to_date,omitempty"`
	LastConfigError string `protobuf:"bytes,5,opt,name=last_config_error,json=lastConfigError,proto3" json:"last_config_error,omitempty"`
	// Management address is copied from the machine status resource.
	ManagementAddress string            `protobuf:"bytes,6,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	ConfigApplyStatus ConfigApplyStatus `protobuf:"varint,7,opt,name=config_apply_status,json=configApplyStatus,proto3,enum=specs.ConfigApplyStatus" json:"config_apply_status,omitempty"`
}

func (x *ClusterMachineStatusSpec) Reset() {
	*x = ClusterMachineStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineStatusSpec) ProtoMessage() {}

func (x *ClusterMachineStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineStatusSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{21}
}

func (x *ClusterMachineStatusSpec) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ClusterMachineStatusSpec) GetStage() ClusterMachineStatusSpec_Stage {
	if x != nil {
		return x.Stage
	}
	return ClusterMachineStatusSpec_UNKNOWN
}

func (x *ClusterMachineStatusSpec) GetApidAvailable() bool {
	if x != nil {
		return x.ApidAvailable
	}
	return false
}

func (x *ClusterMachineStatusSpec) GetConfigUpToDate() bool {
	if x != nil {
		return x.ConfigUpToDate
	}
	return false
}

func (x *ClusterMachineStatusSpec) GetLastConfigError() string {
	if x != nil {
		return x.LastConfigError
	}
	return ""
}

func (x *ClusterMachineStatusSpec) GetManagementAddress() string {
	if x != nil {
		return x.ManagementAddress
	}
	return ""
}

func (x *ClusterMachineStatusSpec) GetConfigApplyStatus() ConfigApplyStatus {
	if x != nil {
		return x.ConfigApplyStatus
	}
	return ConfigApplyStatus_UNKNOWN
}

// Machines counts the number of machines in a set including health status.
type Machines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total machines currently allocated.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Healthy machines.
	Healthy uint32 `protobuf:"varint,2,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// Connected represents the number of machines in a machine set connected to the wireguard network.
	Connected uint32 `protobuf:"varint,3,opt,name=connected,proto3" json:"connected,omitempty"`
	// Requested machines count, same as total for manual allocation, may differ for machine class mode.
	Requested uint32 `protobuf:"varint,4,opt,name=requested,proto3" json:"requested,omitempty"`
}

func (x *Machines) Reset() {
	*x = Machines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machines) ProtoMessage() {}

func (x *Machines) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machines.ProtoReflect.Descriptor instead.
func (*Machines) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{22}
}

func (x *Machines) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Machines) GetHealthy() uint32 {
	if x != nil {
		return x.Healthy
	}
	return 0
}

func (x *Machines) GetConnected() uint32 {
	if x != nil {
		return x.Connected
	}
	return 0
}

func (x *Machines) GetRequested() uint32 {
	if x != nil {
		return x.Requested
	}
	return 0
}

// ClusterStatusSpec aggregates general information about a cluster.
type ClusterStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is available when at least one controlplane node has APId up.
	Available                 bool                    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Machines                  *Machines               `protobuf:"bytes,2,opt,name=machines,proto3" json:"machines,omitempty"`
	Phase                     ClusterStatusSpec_Phase `protobuf:"varint,3,opt,name=phase,proto3,enum=specs.ClusterStatusSpec_Phase" json:"phase,omitempty"`
	Ready                     bool                    `protobuf:"varint,4,opt,name=ready,proto3" json:"ready,omitempty"`
	KubernetesAPIReady        bool                    `protobuf:"varint,5,opt,name=kubernetesAPIReady,proto3" json:"kubernetesAPIReady,omitempty"`
	ControlplaneReady         bool                    `protobuf:"varint,6,opt,name=controlplaneReady,proto3" json:"controlplaneReady,omitempty"`
	HasConnectedControlPlanes bool                    `protobuf:"varint,7,opt,name=has_connected_control_planes,json=hasConnectedControlPlanes,proto3" json:"has_connected_control_planes,omitempty"`
}

func (x *ClusterStatusSpec) Reset() {
	*x = ClusterStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusSpec) ProtoMessage() {}

func (x *ClusterStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusSpec.ProtoReflect.Descriptor instead.
func (*ClusterStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{23}
}

func (x *ClusterStatusSpec) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ClusterStatusSpec) GetMachines() *Machines {
	if x != nil {
		return x.Machines
	}
	return nil
}

func (x *ClusterStatusSpec) GetPhase() ClusterStatusSpec_Phase {
	if x != nil {
		return x.Phase
	}
	return ClusterStatusSpec_UNKNOWN
}

func (x *ClusterStatusSpec) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ClusterStatusSpec) GetKubernetesAPIReady() bool {
	if x != nil {
		return x.KubernetesAPIReady
	}
	return false
}

func (x *ClusterStatusSpec) GetControlplaneReady() bool {
	if x != nil {
		return x.ControlplaneReady
	}
	return false
}

func (x *ClusterStatusSpec) GetHasConnectedControlPlanes() bool {
	if x != nil {
		return x.HasConnectedControlPlanes
	}
	return false
}

// ClusterUUID keeps the UUID of the cluster.
type ClusterUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ClusterUUID) Reset() {
	*x = ClusterUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUUID) ProtoMessage() {}

func (x *ClusterUUID) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUUID.ProtoReflect.Descriptor instead.
func (*ClusterUUID) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{24}
}

func (x *ClusterUUID) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// ClusterConfigVersion keeps the version of Talos which was used for initial config generation.
type ClusterConfigVersionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClusterConfigVersionSpec) Reset() {
	*x = ClusterConfigVersionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigVersionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigVersionSpec) ProtoMessage() {}

func (x *ClusterConfigVersionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigVersionSpec.ProtoReflect.Descriptor instead.
func (*ClusterConfigVersionSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{25}
}

func (x *ClusterConfigVersionSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ClusterMachineConfigStatusSpec machine configuration status spec.
type ClusterMachineConfigStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterMachineConfigVersion string `protobuf:"bytes,3,opt,name=cluster_machine_config_version,json=clusterMachineConfigVersion,proto3" json:"cluster_machine_config_version,omitempty"`
	ClusterMachineVersion       string `protobuf:"bytes,4,opt,name=cluster_machine_version,json=clusterMachineVersion,proto3" json:"cluster_machine_version,omitempty"`
	ClusterMachineConfigSha256  string `protobuf:"bytes,5,opt,name=cluster_machine_config_sha256,json=clusterMachineConfigSha256,proto3" json:"cluster_machine_config_sha256,omitempty"`
	LastConfigError             string `protobuf:"bytes,6,opt,name=last_config_error,json=lastConfigError,proto3" json:"last_config_error,omitempty"`
	TalosVersion                string `protobuf:"bytes,7,opt,name=talos_version,json=talosVersion,proto3" json:"talos_version,omitempty"`
}

func (x *ClusterMachineConfigStatusSpec) Reset() {
	*x = ClusterMachineConfigStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineConfigStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineConfigStatusSpec) ProtoMessage() {}

func (x *ClusterMachineConfigStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineConfigStatusSpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineConfigStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{26}
}

func (x *ClusterMachineConfigStatusSpec) GetClusterMachineConfigVersion() string {
	if x != nil {
		return x.ClusterMachineConfigVersion
	}
	return ""
}

func (x *ClusterMachineConfigStatusSpec) GetClusterMachineVersion() string {
	if x != nil {
		return x.ClusterMachineVersion
	}
	return ""
}

func (x *ClusterMachineConfigStatusSpec) GetClusterMachineConfigSha256() string {
	if x != nil {
		return x.ClusterMachineConfigSha256
	}
	return ""
}

func (x *ClusterMachineConfigStatusSpec) GetLastConfigError() string {
	if x != nil {
		return x.LastConfigError
	}
	return ""
}

func (x *ClusterMachineConfigStatusSpec) GetTalosVersion() string {
	if x != nil {
		return x.TalosVersion
	}
	return ""
}

// ClusterBootstrapStatusSpec keeps track of bootstrap calls for a cluster.
type ClusterBootstrapStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bootstrapped bool `protobuf:"varint,1,opt,name=bootstrapped,proto3" json:"bootstrapped,omitempty"`
}

func (x *ClusterBootstrapStatusSpec) Reset() {
	*x = ClusterBootstrapStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterBootstrapStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterBootstrapStatusSpec) ProtoMessage() {}

func (x *ClusterBootstrapStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterBootstrapStatusSpec.ProtoReflect.Descriptor instead.
func (*ClusterBootstrapStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{27}
}

func (x *ClusterBootstrapStatusSpec) GetBootstrapped() bool {
	if x != nil {
		return x.Bootstrapped
	}
	return false
}

// ClusterSecretsSpec describes cluster secrets.
type ClusterSecretsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bytes holding serialized cluster secrets.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ClusterSecretsSpec) Reset() {
	*x = ClusterSecretsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSecretsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSecretsSpec) ProtoMessage() {}

func (x *ClusterSecretsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSecretsSpec.ProtoReflect.Descriptor instead.
func (*ClusterSecretsSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{28}
}

func (x *ClusterSecretsSpec) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// LoadBalancerConfigSpec describes the configuration of a load balancer.
type LoadBalancerConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindPort string `protobuf:"bytes,2,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// Full URL of the loadbalancer inside Omni environment.
	SiderolinkEndpoint string `protobuf:"bytes,4,opt,name=siderolink_endpoint,json=siderolinkEndpoint,proto3" json:"siderolink_endpoint,omitempty"`
	// IP adresses of the endpoints
	Endpoints []string `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *LoadBalancerConfigSpec) Reset() {
	*x = LoadBalancerConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerConfigSpec) ProtoMessage() {}

func (x *LoadBalancerConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerConfigSpec.ProtoReflect.Descriptor instead.
func (*LoadBalancerConfigSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{29}
}

func (x *LoadBalancerConfigSpec) GetBindPort() string {
	if x != nil {
		return x.BindPort
	}
	return ""
}

func (x *LoadBalancerConfigSpec) GetSiderolinkEndpoint() string {
	if x != nil {
		return x.SiderolinkEndpoint
	}
	return ""
}

func (x *LoadBalancerConfigSpec) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// LoadBalancerStatusSpec reflects the status of a load balancer.
type LoadBalancerStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy bool `protobuf:"varint,3,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Stopped bool `protobuf:"varint,4,opt,name=stopped,proto3" json:"stopped,omitempty"`
}

func (x *LoadBalancerStatusSpec) Reset() {
	*x = LoadBalancerStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerStatusSpec) ProtoMessage() {}

func (x *LoadBalancerStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerStatusSpec.ProtoReflect.Descriptor instead.
func (*LoadBalancerStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{30}
}

func (x *LoadBalancerStatusSpec) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *LoadBalancerStatusSpec) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

// KubernetesVersionSpec represents an available Kubernetes version.
type KubernetesVersionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *KubernetesVersionSpec) Reset() {
	*x = KubernetesVersionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesVersionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesVersionSpec) ProtoMessage() {}

func (x *KubernetesVersionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesVersionSpec.ProtoReflect.Descriptor instead.
func (*KubernetesVersionSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{31}
}

func (x *KubernetesVersionSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// TalosVersionSpec represents an available Talos version.
type TalosVersionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                      string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CompatibleKubernetesVersions []string `protobuf:"bytes,2,rep,name=compatible_kubernetes_versions,json=compatibleKubernetesVersions,proto3" json:"compatible_kubernetes_versions,omitempty"`
}

func (x *TalosVersionSpec) Reset() {
	*x = TalosVersionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalosVersionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalosVersionSpec) ProtoMessage() {}

func (x *TalosVersionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalosVersionSpec.ProtoReflect.Descriptor instead.
func (*TalosVersionSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{32}
}

func (x *TalosVersionSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TalosVersionSpec) GetCompatibleKubernetesVersions() []string {
	if x != nil {
		return x.CompatibleKubernetesVersions
	}
	return nil
}

// InstallationMediaSpec resource describes a Talos installation media that can be generated by the imager. It also describes the necessary parameters to be passed to the imager.
type InstallationMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Architecture string `protobuf:"bytes,2,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Profile      string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	ContentType  string `protobuf:"bytes,6,opt,name=contentType,proto3" json:"contentType,omitempty"`
	Filename     string `protobuf:"bytes,7,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *InstallationMediaSpec) Reset() {
	*x = InstallationMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallationMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallationMediaSpec) ProtoMessage() {}

func (x *InstallationMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallationMediaSpec.ProtoReflect.Descriptor instead.
func (*InstallationMediaSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{33}
}

func (x *InstallationMediaSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallationMediaSpec) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *InstallationMediaSpec) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *InstallationMediaSpec) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *InstallationMediaSpec) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// ConfigPatchSpec represents the machine config patch.
type ConfigPatchSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfigPatchSpec) Reset() {
	*x = ConfigPatchSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigPatchSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigPatchSpec) ProtoMessage() {}

func (x *ConfigPatchSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigPatchSpec.ProtoReflect.Descriptor instead.
func (*ConfigPatchSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{34}
}

func (x *ConfigPatchSpec) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// MachineSetSpec describes the cluster machine group.
type MachineSetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStrategy MachineSetSpec_UpdateStrategy `protobuf:"varint,1,opt,name=update_strategy,json=updateStrategy,proto3,enum=specs.MachineSetSpec_UpdateStrategy" json:"update_strategy,omitempty"`
	MachineClass   *MachineSetSpec_MachineClass  `protobuf:"bytes,2,opt,name=machine_class,json=machineClass,proto3" json:"machine_class,omitempty"`
	// BootstrapSpec defines the bootstrapping spec of the machine set.
	// This field is immutable, only valid for the control plane machine set and used only once at the creation time.
	// When set, the machine set won't be created from scratch, instead, it will be bootstrapped using the given spec.
	BootstrapSpec *MachineSetSpec_BootstrapSpec `protobuf:"bytes,3,opt,name=bootstrap_spec,json=bootstrapSpec,proto3" json:"bootstrap_spec,omitempty"`
}

func (x *MachineSetSpec) Reset() {
	*x = MachineSetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSetSpec) ProtoMessage() {}

func (x *MachineSetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSetSpec.ProtoReflect.Descriptor instead.
func (*MachineSetSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{35}
}

func (x *MachineSetSpec) GetUpdateStrategy() MachineSetSpec_UpdateStrategy {
	if x != nil {
		return x.UpdateStrategy
	}
	return MachineSetSpec_Unset
}

func (x *MachineSetSpec) GetMachineClass() *MachineSetSpec_MachineClass {
	if x != nil {
		return x.MachineClass
	}
	return nil
}

func (x *MachineSetSpec) GetBootstrapSpec() *MachineSetSpec_BootstrapSpec {
	if x != nil {
		return x.BootstrapSpec
	}
	return nil
}

// TalosUpgradeStatusSpec contains the status of the Talos upgrade process.
type TalosUpgradeStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current upgrade phase.
	Phase TalosUpgradeStatusSpec_Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=specs.TalosUpgradeStatusSpec_Phase" json:"phase,omitempty"`
	// If phase is Failed, this contains the error message.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// If phase is Upgrading, this contains the current upgrade step.
	Step string `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
	// If phase is Upgrading, this contains the current upgrade step progress.
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Last successful upgrade version.
	LastUpgradeVersion string `protobuf:"bytes,5,opt,name=last_upgrade_version,json=lastUpgradeVersion,proto3" json:"last_upgrade_version,omitempty"`
	// Current version of the upgrade (if phase == Upgrading).
	CurrentUpgradeVersion string `protobuf:"bytes,6,opt,name=current_upgrade_version,json=currentUpgradeVersion,proto3" json:"current_upgrade_version,omitempty"`
	// List of versions available for upgrade.
	UpgradeVersions []string `protobuf:"bytes,7,rep,name=upgrade_versions,json=upgradeVersions,proto3" json:"upgrade_versions,omitempty"`
}

func (x *TalosUpgradeStatusSpec) Reset() {
	*x = TalosUpgradeStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalosUpgradeStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalosUpgradeStatusSpec) ProtoMessage() {}

func (x *TalosUpgradeStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalosUpgradeStatusSpec.ProtoReflect.Descriptor instead.
func (*TalosUpgradeStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{36}
}

func (x *TalosUpgradeStatusSpec) GetPhase() TalosUpgradeStatusSpec_Phase {
	if x != nil {
		return x.Phase
	}
	return TalosUpgradeStatusSpec_Unknown
}

func (x *TalosUpgradeStatusSpec) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TalosUpgradeStatusSpec) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *TalosUpgradeStatusSpec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TalosUpgradeStatusSpec) GetLastUpgradeVersion() string {
	if x != nil {
		return x.LastUpgradeVersion
	}
	return ""
}

func (x *TalosUpgradeStatusSpec) GetCurrentUpgradeVersion() string {
	if x != nil {
		return x.CurrentUpgradeVersion
	}
	return ""
}

func (x *TalosUpgradeStatusSpec) GetUpgradeVersions() []string {
	if x != nil {
		return x.UpgradeVersions
	}
	return nil
}

// MachineSetStatusSpec describes machine set status.
type MachineSetStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    MachineSetPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=specs.MachineSetPhase" json:"phase,omitempty"`
	Ready    bool            `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	Error    string          `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Machines *Machines       `protobuf:"bytes,4,opt,name=machines,proto3" json:"machines,omitempty"`
	// config_hash is the combined hash of all cluster machines which are part of the machine set.
	ConfigHash string `protobuf:"bytes,5,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
	// MachineClass is copied from the input MachineSet resource.
	MachineClass *MachineSetSpec_MachineClass `protobuf:"bytes,6,opt,name=machine_class,json=machineClass,proto3" json:"machine_class,omitempty"`
}

func (x *MachineSetStatusSpec) Reset() {
	*x = MachineSetStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSetStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSetStatusSpec) ProtoMessage() {}

func (x *MachineSetStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSetStatusSpec.ProtoReflect.Descriptor instead.
func (*MachineSetStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{37}
}

func (x *MachineSetStatusSpec) GetPhase() MachineSetPhase {
	if x != nil {
		return x.Phase
	}
	return MachineSetPhase_Unknown
}

func (x *MachineSetStatusSpec) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *MachineSetStatusSpec) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MachineSetStatusSpec) GetMachines() *Machines {
	if x != nil {
		return x.Machines
	}
	return nil
}

func (x *MachineSetStatusSpec) GetConfigHash() string {
	if x != nil {
		return x.ConfigHash
	}
	return ""
}

func (x *MachineSetStatusSpec) GetMachineClass() *MachineSetSpec_MachineClass {
	if x != nil {
		return x.MachineClass
	}
	return nil
}

// MachineSetNodeSpec is a binding between ClusterMachine and MachineSet.
type MachineSetNodeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MachineSetNodeSpec) Reset() {
	*x = MachineSetNodeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSetNodeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSetNodeSpec) ProtoMessage() {}

func (x *MachineSetNodeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSetNodeSpec.ProtoReflect.Descriptor instead.
func (*MachineSetNodeSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{38}
}

// MachineLabelsSpec is the resource that adds user defined labels to the MachineStatus.
type MachineLabelsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MachineLabelsSpec) Reset() {
	*x = MachineLabelsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineLabelsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLabelsSpec) ProtoMessage() {}

func (x *MachineLabelsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLabelsSpec.ProtoReflect.Descriptor instead.
func (*MachineLabelsSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{39}
}

// MachineStatusSnapshotSpec describes latest known status of MachineStatus Talos resource.
type MachineStatusSnapshotSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineStatus *machine.MachineStatusEvent `protobuf:"bytes,1,opt,name=machine_status,json=machineStatus,proto3" json:"machine_status,omitempty"`
}

func (x *MachineStatusSnapshotSpec) Reset() {
	*x = MachineStatusSnapshotSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSnapshotSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSnapshotSpec) ProtoMessage() {}

func (x *MachineStatusSnapshotSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSnapshotSpec.ProtoReflect.Descriptor instead.
func (*MachineStatusSnapshotSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{40}
}

func (x *MachineStatusSnapshotSpec) GetMachineStatus() *machine.MachineStatusEvent {
	if x != nil {
		return x.MachineStatus
	}
	return nil
}

// ControlPlaneStatusSpec contains the status of the MachineSets which manage control plane nodes.
type ControlPlaneStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*ControlPlaneStatusSpec_Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *ControlPlaneStatusSpec) Reset() {
	*x = ControlPlaneStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneStatusSpec) ProtoMessage() {}

func (x *ControlPlaneStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneStatusSpec.ProtoReflect.Descriptor instead.
func (*ControlPlaneStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{41}
}

func (x *ControlPlaneStatusSpec) GetConditions() []*ControlPlaneStatusSpec_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// ClusterEndpointSpec contains a list of SideroLink (management) control plane endpoints.
type ClusterEndpointSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of SideroLink addresses for control plane nodes.
	ManagementAddresses []string `protobuf:"bytes,1,rep,name=management_addresses,json=managementAddresses,proto3" json:"management_addresses,omitempty"`
}

func (x *ClusterEndpointSpec) Reset() {
	*x = ClusterEndpointSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterEndpointSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterEndpointSpec) ProtoMessage() {}

func (x *ClusterEndpointSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterEndpointSpec.ProtoReflect.Descriptor instead.
func (*ClusterEndpointSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{42}
}

func (x *ClusterEndpointSpec) GetManagementAddresses() []string {
	if x != nil {
		return x.ManagementAddresses
	}
	return nil
}

// KubernetesStatusSpec contains the status of the Kubernetes critical resources in the cluster.
type KubernetesStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of each node, sorted by nodename
	Nodes []*KubernetesStatusSpec_NodeStatus `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// status of each static pod on each node, sorted by nodename, then by pod's app
	StaticPods []*KubernetesStatusSpec_NodeStaticPods `protobuf:"bytes,2,rep,name=static_pods,json=staticPods,proto3" json:"static_pods,omitempty"`
}

func (x *KubernetesStatusSpec) Reset() {
	*x = KubernetesStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatusSpec) ProtoMessage() {}

func (x *KubernetesStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatusSpec.ProtoReflect.Descriptor instead.
func (*KubernetesStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{43}
}

func (x *KubernetesStatusSpec) GetNodes() []*KubernetesStatusSpec_NodeStatus {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *KubernetesStatusSpec) GetStaticPods() []*KubernetesStatusSpec_NodeStaticPods {
	if x != nil {
		return x.StaticPods
	}
	return nil
}

// KubernetesUpgradeStatus spec contains the status of the Kubernetes upgrade process.
type KubernetesUpgradeStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current upgrade phase.
	Phase KubernetesUpgradeStatusSpec_Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=specs.KubernetesUpgradeStatusSpec_Phase" json:"phase,omitempty"`
	// If phase is Failed, this contains the error message.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// If phase is Upgrading, this contains the current upgrade step.
	Step string `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
	// If phase is Upgrading, this contains the current upgrade step progress.
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Last successful upgrade version.
	LastUpgradeVersion string `protobuf:"bytes,5,opt,name=last_upgrade_version,json=lastUpgradeVersion,proto3" json:"last_upgrade_version,omitempty"`
	// Current version of the upgrade (if phase == Upgrading).
	CurrentUpgradeVersion string `protobuf:"bytes,7,opt,name=current_upgrade_version,json=currentUpgradeVersion,proto3" json:"current_upgrade_version,omitempty"`
	// List of versions available for upgrade.
	UpgradeVersions []string `protobuf:"bytes,6,rep,name=upgrade_versions,json=upgradeVersions,proto3" json:"upgrade_versions,omitempty"`
}

func (x *KubernetesUpgradeStatusSpec) Reset() {
	*x = KubernetesUpgradeStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesUpgradeStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesUpgradeStatusSpec) ProtoMessage() {}

func (x *KubernetesUpgradeStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesUpgradeStatusSpec.ProtoReflect.Descriptor instead.
func (*KubernetesUpgradeStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{44}
}

func (x *KubernetesUpgradeStatusSpec) GetPhase() KubernetesUpgradeStatusSpec_Phase {
	if x != nil {
		return x.Phase
	}
	return KubernetesUpgradeStatusSpec_Unknown
}

func (x *KubernetesUpgradeStatusSpec) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *KubernetesUpgradeStatusSpec) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *KubernetesUpgradeStatusSpec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KubernetesUpgradeStatusSpec) GetLastUpgradeVersion() string {
	if x != nil {
		return x.LastUpgradeVersion
	}
	return ""
}

func (x *KubernetesUpgradeStatusSpec) GetCurrentUpgradeVersion() string {
	if x != nil {
		return x.CurrentUpgradeVersion
	}
	return ""
}

func (x *KubernetesUpgradeStatusSpec) GetUpgradeVersions() []string {
	if x != nil {
		return x.UpgradeVersions
	}
	return nil
}

// KubernetesUpgradeManifestStatus contains status of Kubernetes upgrade manifest sync.
type KubernetesUpgradeManifestStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of manifests out of sync.
	OutOfSync int32 `protobuf:"varint,1,opt,name=out_of_sync,json=outOfSync,proto3" json:"out_of_sync,omitempty"`
	// Last fatal error encountered (which prevented the sync).
	LastFatalError string `protobuf:"bytes,2,opt,name=last_fatal_error,json=lastFatalError,proto3" json:"last_fatal_error,omitempty"`
}

func (x *KubernetesUpgradeManifestStatusSpec) Reset() {
	*x = KubernetesUpgradeManifestStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesUpgradeManifestStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesUpgradeManifestStatusSpec) ProtoMessage() {}

func (x *KubernetesUpgradeManifestStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesUpgradeManifestStatusSpec.ProtoReflect.Descriptor instead.
func (*KubernetesUpgradeManifestStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{45}
}

func (x *KubernetesUpgradeManifestStatusSpec) GetOutOfSync() int32 {
	if x != nil {
		return x.OutOfSync
	}
	return 0
}

func (x *KubernetesUpgradeManifestStatusSpec) GetLastFatalError() string {
	if x != nil {
		return x.LastFatalError
	}
	return ""
}

// DestroyStatusSpec describes the state of resource destroy.
type DestroyStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase describes the current destroy phase.
	Phase string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *DestroyStatusSpec) Reset() {
	*x = DestroyStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyStatusSpec) ProtoMessage() {}

func (x *DestroyStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyStatusSpec.ProtoReflect.Descriptor instead.
func (*DestroyStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{46}
}

func (x *DestroyStatusSpec) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

// OngoingTaskSpec describes any ongoing tasks.
type OngoingTaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title of the ongoing task.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Details contains the detailed task description.
	//
	// Types that are assignable to Details:
	//
	//	*OngoingTaskSpec_TalosUpgrade
	//	*OngoingTaskSpec_KubernetesUpgrade
	//	*OngoingTaskSpec_Destroy
	Details isOngoingTaskSpec_Details `protobuf_oneof:"details"`
}

func (x *OngoingTaskSpec) Reset() {
	*x = OngoingTaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingTaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingTaskSpec) ProtoMessage() {}

func (x *OngoingTaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingTaskSpec.ProtoReflect.Descriptor instead.
func (*OngoingTaskSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{47}
}

func (x *OngoingTaskSpec) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (m *OngoingTaskSpec) GetDetails() isOngoingTaskSpec_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *OngoingTaskSpec) GetTalosUpgrade() *TalosUpgradeStatusSpec {
	if x, ok := x.GetDetails().(*OngoingTaskSpec_TalosUpgrade); ok {
		return x.TalosUpgrade
	}
	return nil
}

func (x *OngoingTaskSpec) GetKubernetesUpgrade() *KubernetesUpgradeStatusSpec {
	if x, ok := x.GetDetails().(*OngoingTaskSpec_KubernetesUpgrade); ok {
		return x.KubernetesUpgrade
	}
	return nil
}

func (x *OngoingTaskSpec) GetDestroy() *DestroyStatusSpec {
	if x, ok := x.GetDetails().(*OngoingTaskSpec_Destroy); ok {
		return x.Destroy
	}
	return nil
}

type isOngoingTaskSpec_Details interface {
	isOngoingTaskSpec_Details()
}

type OngoingTaskSpec_TalosUpgrade struct {
	TalosUpgrade *TalosUpgradeStatusSpec `protobuf:"bytes,2,opt,name=talos_upgrade,json=talosUpgrade,proto3,oneof"`
}

type OngoingTaskSpec_KubernetesUpgrade struct {
	KubernetesUpgrade *KubernetesUpgradeStatusSpec `protobuf:"bytes,3,opt,name=kubernetes_upgrade,json=kubernetesUpgrade,proto3,oneof"`
}

type OngoingTaskSpec_Destroy struct {
	Destroy *DestroyStatusSpec `protobuf:"bytes,4,opt,name=destroy,proto3,oneof"`
}

func (*OngoingTaskSpec_TalosUpgrade) isOngoingTaskSpec_Details() {}

func (*OngoingTaskSpec_KubernetesUpgrade) isOngoingTaskSpec_Details() {}

func (*OngoingTaskSpec_Destroy) isOngoingTaskSpec_Details() {}

// ClusterMachineEncryptionKeySpec keeps generated encryption key for the machine disk encryption.
type ClusterMachineEncryptionKeySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data stores generated encryption key for the machine.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ClusterMachineEncryptionKeySpec) Reset() {
	*x = ClusterMachineEncryptionKeySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineEncryptionKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineEncryptionKeySpec) ProtoMessage() {}

func (x *ClusterMachineEncryptionKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineEncryptionKeySpec.ProtoReflect.Descriptor instead.
func (*ClusterMachineEncryptionKeySpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{48}
}

func (x *ClusterMachineEncryptionKeySpec) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ExposedServiceSpec describes a Kubernetes service exposed through Omni from a workload cluster.
type ExposedServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port is the host port the service is exposed on.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Label is the human-readable label of the service to be displayed on Omni Web.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// IconBase64 is the icon of the service to be displayed on Omni Web.
	IconBase64 string `protobuf:"bytes,3,opt,name=icon_base64,json=iconBase64,proto3" json:"icon_base64,omitempty"`
}

func (x *ExposedServiceSpec) Reset() {
	*x = ExposedServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposedServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposedServiceSpec) ProtoMessage() {}

func (x *ExposedServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposedServiceSpec.ProtoReflect.Descriptor instead.
func (*ExposedServiceSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{49}
}

func (x *ExposedServiceSpec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ExposedServiceSpec) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ExposedServiceSpec) GetIconBase64() string {
	if x != nil {
		return x.IconBase64
	}
	return ""
}

type FeaturesConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EnableWorkloadProxying enables workload proxying feature.
	EnableWorkloadProxying bool `protobuf:"varint,1,opt,name=enable_workload_proxying,json=enableWorkloadProxying,proto3" json:"enable_workload_proxying,omitempty"`
	// EtcdBackupSettings represents omni etcd backup settings.
	EtcdBackupSettings *EtcdBackupSettings `protobuf:"bytes,2,opt,name=etcd_backup_settings,json=etcdBackupSettings,proto3" json:"etcd_backup_settings,omitempty"`
}

func (x *FeaturesConfigSpec) Reset() {
	*x = FeaturesConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturesConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturesConfigSpec) ProtoMessage() {}

func (x *FeaturesConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturesConfigSpec.ProtoReflect.Descriptor instead.
func (*FeaturesConfigSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{50}
}

func (x *FeaturesConfigSpec) GetEnableWorkloadProxying() bool {
	if x != nil {
		return x.EnableWorkloadProxying
	}
	return false
}

func (x *FeaturesConfigSpec) GetEtcdBackupSettings() *EtcdBackupSettings {
	if x != nil {
		return x.EtcdBackupSettings
	}
	return nil
}

type EtcdBackupSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TickInterval is the interval between checking for backups in controller.
	TickInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=tick_interval,json=tickInterval,proto3" json:"tick_interval,omitempty"`
	// MinInterval is the minimum interval between backups.
	MinInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=min_interval,json=minInterval,proto3" json:"min_interval,omitempty"`
	// MaxInterval is the maximum interval between backups.
	MaxInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
}

func (x *EtcdBackupSettings) Reset() {
	*x = EtcdBackupSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdBackupSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdBackupSettings) ProtoMessage() {}

func (x *EtcdBackupSettings) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdBackupSettings.ProtoReflect.Descriptor instead.
func (*EtcdBackupSettings) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{51}
}

func (x *EtcdBackupSettings) GetTickInterval() *durationpb.Duration {
	if x != nil {
		return x.TickInterval
	}
	return nil
}

func (x *EtcdBackupSettings) GetMinInterval() *durationpb.Duration {
	if x != nil {
		return x.MinInterval
	}
	return nil
}

func (x *EtcdBackupSettings) GetMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

// MachineClassSpec describes an Omni MachineClass resource spec.
type MachineClassSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MatchLabels is the list of labels to match the machine to make it part of the machine class.
	MatchLabels []string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty"`
}

func (x *MachineClassSpec) Reset() {
	*x = MachineClassSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineClassSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineClassSpec) ProtoMessage() {}

func (x *MachineClassSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineClassSpec.ProtoReflect.Descriptor instead.
func (*MachineClassSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{52}
}

func (x *MachineClassSpec) GetMatchLabels() []string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

// MachineConfigGenOptionsSpec describes machine related config generation inputs.
type MachineConfigGenOptionsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstallDisk string `protobuf:"bytes,1,opt,name=install_disk,json=installDisk,proto3" json:"install_disk,omitempty"`
}

func (x *MachineConfigGenOptionsSpec) Reset() {
	*x = MachineConfigGenOptionsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConfigGenOptionsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfigGenOptionsSpec) ProtoMessage() {}

func (x *MachineConfigGenOptionsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfigGenOptionsSpec.ProtoReflect.Descriptor instead.
func (*MachineConfigGenOptionsSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{53}
}

func (x *MachineConfigGenOptionsSpec) GetInstallDisk() string {
	if x != nil {
		return x.InstallDisk
	}
	return ""
}

// EtcdAuditResult is updated when the etcd audit removes a member.
//
// This resource is used to re-trigger the controlplane status checks when etcd audit removes a member.
type EtcdAuditResultSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EtcdMemberId is the id of the member that was last removed.
	EtcdMemberId uint64 `protobuf:"varint,1,opt,name=etcd_member_id,json=etcdMemberId,proto3" json:"etcd_member_id,omitempty"`
}

func (x *EtcdAuditResultSpec) Reset() {
	*x = EtcdAuditResultSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdAuditResultSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdAuditResultSpec) ProtoMessage() {}

func (x *EtcdAuditResultSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdAuditResultSpec.ProtoReflect.Descriptor instead.
func (*EtcdAuditResultSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{54}
}

func (x *EtcdAuditResultSpec) GetEtcdMemberId() uint64 {
	if x != nil {
		return x.EtcdMemberId
	}
	return 0
}

// KubeconfigSpec describes a Kubernetes client configuraiton for a cluster.
type KubeconfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Marshalled kubeconfig.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KubeconfigSpec) Reset() {
	*x = KubeconfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeconfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeconfigSpec) ProtoMessage() {}

func (x *KubeconfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeconfigSpec.ProtoReflect.Descriptor instead.
func (*KubeconfigSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{55}
}

func (x *KubeconfigSpec) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// KubernetesUsageSpec represents kubernetes resource usage for a cluster.
type KubernetesUsageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu     *KubernetesUsageSpec_Quantity `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem     *KubernetesUsageSpec_Quantity `protobuf:"bytes,2,opt,name=mem,proto3" json:"mem,omitempty"`
	Storage *KubernetesUsageSpec_Quantity `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	Pods    *KubernetesUsageSpec_Pod      `protobuf:"bytes,4,opt,name=pods,proto3" json:"pods,omitempty"`
}

func (x *KubernetesUsageSpec) Reset() {
	*x = KubernetesUsageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesUsageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesUsageSpec) ProtoMessage() {}

func (x *KubernetesUsageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesUsageSpec.ProtoReflect.Descriptor instead.
func (*KubernetesUsageSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{56}
}

func (x *KubernetesUsageSpec) GetCpu() *KubernetesUsageSpec_Quantity {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *KubernetesUsageSpec) GetMem() *KubernetesUsageSpec_Quantity {
	if x != nil {
		return x.Mem
	}
	return nil
}

func (x *KubernetesUsageSpec) GetStorage() *KubernetesUsageSpec_Quantity {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *KubernetesUsageSpec) GetPods() *KubernetesUsageSpec_Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

// ImagePullRequestSpec describes an Omni ImagePullRequest resource spec.
type ImagePullRequestSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeImageList are the images to be pulled into the node.
	NodeImageList []*ImagePullRequestSpec_NodeImageList `protobuf:"bytes,1,rep,name=node_image_list,json=nodeImageList,proto3" json:"node_image_list,omitempty"`
}

func (x *ImagePullRequestSpec) Reset() {
	*x = ImagePullRequestSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePullRequestSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullRequestSpec) ProtoMessage() {}

func (x *ImagePullRequestSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullRequestSpec.ProtoReflect.Descriptor instead.
func (*ImagePullRequestSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{57}
}

func (x *ImagePullRequestSpec) GetNodeImageList() []*ImagePullRequestSpec_NodeImageList {
	if x != nil {
		return x.NodeImageList
	}
	return nil
}

// ImagePullStatusSpec describes an Omni ImagePullStatus resource spec.
type ImagePullStatusSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastProcessedNode  string `protobuf:"bytes,1,opt,name=last_processed_node,json=lastProcessedNode,proto3" json:"last_processed_node,omitempty"`
	LastProcessedImage string `protobuf:"bytes,2,opt,name=last_processed_image,json=lastProcessedImage,proto3" json:"last_processed_image,omitempty"`
	LastProcessedError string `protobuf:"bytes,3,opt,name=last_processed_error,json=lastProcessedError,proto3" json:"last_processed_error,omitempty"`
	ProcessedCount     uint32 `protobuf:"varint,4,opt,name=processed_count,json=processedCount,proto3" json:"processed_count,omitempty"`
	TotalCount         uint32 `protobuf:"varint,5,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// RequestVersion is the version of the ImagePullRequest that this status is for.
	RequestVersion string `protobuf:"bytes,6,opt,name=request_version,json=requestVersion,proto3" json:"request_version,omitempty"`
}

func (x *ImagePullStatusSpec) Reset() {
	*x = ImagePullStatusSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePullStatusSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullStatusSpec) ProtoMessage() {}

func (x *ImagePullStatusSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullStatusSpec.ProtoReflect.Descriptor instead.
func (*ImagePullStatusSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{58}
}

func (x *ImagePullStatusSpec) GetLastProcessedNode() string {
	if x != nil {
		return x.LastProcessedNode
	}
	return ""
}

func (x *ImagePullStatusSpec) GetLastProcessedImage() string {
	if x != nil {
		return x.LastProcessedImage
	}
	return ""
}

func (x *ImagePullStatusSpec) GetLastProcessedError() string {
	if x != nil {
		return x.LastProcessedError
	}
	return ""
}

func (x *ImagePullStatusSpec) GetProcessedCount() uint32 {
	if x != nil {
		return x.ProcessedCount
	}
	return 0
}

func (x *ImagePullStatusSpec) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ImagePullStatusSpec) GetRequestVersion() string {
	if x != nil {
		return x.RequestVersion
	}
	return ""
}

// HardwareStatus describes machine hardware status.
type MachineStatusSpec_HardwareStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU information.
	Processors []*MachineStatusSpec_HardwareStatus_Processor `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty"`
	// Memory information.
	MemoryModules []*MachineStatusSpec_HardwareStatus_MemoryModule `protobuf:"bytes,2,rep,name=memory_modules,json=memoryModules,proto3" json:"memory_modules,omitempty"`
	// Blockdevice information.
	Blockdevices []*MachineStatusSpec_HardwareStatus_BlockDevice `protobuf:"bytes,3,rep,name=blockdevices,proto3" json:"blockdevices,omitempty"`
	// Machine architecture.
	Arch string `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty"`
}

func (x *MachineStatusSpec_HardwareStatus) Reset() {
	*x = MachineStatusSpec_HardwareStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_HardwareStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_HardwareStatus) ProtoMessage() {}

func (x *MachineStatusSpec_HardwareStatus) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_HardwareStatus.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_HardwareStatus) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MachineStatusSpec_HardwareStatus) GetProcessors() []*MachineStatusSpec_HardwareStatus_Processor {
	if x != nil {
		return x.Processors
	}
	return nil
}

func (x *MachineStatusSpec_HardwareStatus) GetMemoryModules() []*MachineStatusSpec_HardwareStatus_MemoryModule {
	if x != nil {
		return x.MemoryModules
	}
	return nil
}

func (x *MachineStatusSpec_HardwareStatus) GetBlockdevices() []*MachineStatusSpec_HardwareStatus_BlockDevice {
	if x != nil {
		return x.Blockdevices
	}
	return nil
}

func (x *MachineStatusSpec_HardwareStatus) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

// NetworkStatus describes the status of a machine network .
type MachineStatusSpec_NetworkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current machine hostname.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Current machine domainname.
	Domainname string `protobuf:"bytes,2,opt,name=domainname,proto3" json:"domainname,omitempty"`
	// List of machine IPs.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// List of default gateway IPs.
	DefaultGateways []string `protobuf:"bytes,4,rep,name=default_gateways,json=defaultGateways,proto3" json:"default_gateways,omitempty"`
	// List of physical network interfaces.
	NetworkLinks []*MachineStatusSpec_NetworkStatus_NetworkLinkStatus `protobuf:"bytes,5,rep,name=network_links,json=networkLinks,proto3" json:"network_links,omitempty"`
}

func (x *MachineStatusSpec_NetworkStatus) Reset() {
	*x = MachineStatusSpec_NetworkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_NetworkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_NetworkStatus) ProtoMessage() {}

func (x *MachineStatusSpec_NetworkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_NetworkStatus.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_NetworkStatus) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MachineStatusSpec_NetworkStatus) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MachineStatusSpec_NetworkStatus) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

func (x *MachineStatusSpec_NetworkStatus) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *MachineStatusSpec_NetworkStatus) GetDefaultGateways() []string {
	if x != nil {
		return x.DefaultGateways
	}
	return nil
}

func (x *MachineStatusSpec_NetworkStatus) GetNetworkLinks() []*MachineStatusSpec_NetworkStatus_NetworkLinkStatus {
	if x != nil {
		return x.NetworkLinks
	}
	return nil
}

// PlatformMetadata describes platform-specific information.
type MachineStatusSpec_PlatformMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Platform is the name of the platform (e.g. `aws`, `gcp`, `azure`).
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Hostname is the hostname of the machine.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Region (in the cloud).
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Availability zone (in the cloud).
	Zone string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	// Instance type (in the cloud).
	InstanceType string `protobuf:"bytes,5,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Instance ID (in the cloud).
	InstanceId string `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Provider ID (for the Node resource).
	ProviderId string `protobuf:"bytes,7,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// Spot instance flag.
	Spot bool `protobuf:"varint,8,opt,name=spot,proto3" json:"spot,omitempty"`
}

func (x *MachineStatusSpec_PlatformMetadata) Reset() {
	*x = MachineStatusSpec_PlatformMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_PlatformMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_PlatformMetadata) ProtoMessage() {}

func (x *MachineStatusSpec_PlatformMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_PlatformMetadata.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_PlatformMetadata) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 2}
}

func (x *MachineStatusSpec_PlatformMetadata) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *MachineStatusSpec_PlatformMetadata) GetSpot() bool {
	if x != nil {
		return x.Spot
	}
	return false
}

// Processor describes machine CPU.
type MachineStatusSpec_HardwareStatus_Processor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of cores.
	CoreCount uint32 `protobuf:"varint,1,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
	// Number of threads.
	ThreadCount uint32 `protobuf:"varint,2,opt,name=thread_count,json=threadCount,proto3" json:"thread_count,omitempty"`
	// CPU frequency in MHz.
	Frequency uint32 `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// CPU manufacturer and model.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// CPU manufacturer.
	Manufacturer string `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
}

func (x *MachineStatusSpec_HardwareStatus_Processor) Reset() {
	*x = MachineStatusSpec_HardwareStatus_Processor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_HardwareStatus_Processor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_HardwareStatus_Processor) ProtoMessage() {}

func (x *MachineStatusSpec_HardwareStatus_Processor) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_HardwareStatus_Processor.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_HardwareStatus_Processor) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *MachineStatusSpec_HardwareStatus_Processor) GetCoreCount() uint32 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

func (x *MachineStatusSpec_HardwareStatus_Processor) GetThreadCount() uint32 {
	if x != nil {
		return x.ThreadCount
	}
	return 0
}

func (x *MachineStatusSpec_HardwareStatus_Processor) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *MachineStatusSpec_HardwareStatus_Processor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_Processor) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

// MemoryModule describes machine memory.
type MachineStatusSpec_HardwareStatus_MemoryModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of memory in MB.
	SizeMb uint32 `protobuf:"varint,1,opt,name=size_mb,json=sizeMb,proto3" json:"size_mb,omitempty"`
	// Memory manufacturer and model.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MachineStatusSpec_HardwareStatus_MemoryModule) Reset() {
	*x = MachineStatusSpec_HardwareStatus_MemoryModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_HardwareStatus_MemoryModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_HardwareStatus_MemoryModule) ProtoMessage() {}

func (x *MachineStatusSpec_HardwareStatus_MemoryModule) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_HardwareStatus_MemoryModule.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_HardwareStatus_MemoryModule) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *MachineStatusSpec_HardwareStatus_MemoryModule) GetSizeMb() uint32 {
	if x != nil {
		return x.SizeMb
	}
	return 0
}

func (x *MachineStatusSpec_HardwareStatus_MemoryModule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BlockDevice describes a block device.
type MachineStatusSpec_HardwareStatus_BlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size indicates the disk size in bytes.
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Model idicates the disk model.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Linux blockdevice name (e.g. `/dev/sda`).
	LinuxName string `protobuf:"bytes,3,opt,name=linux_name,json=linuxName,proto3" json:"linux_name,omitempty"`
	// Name as in `/sys/block/<dev>/device/name`.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Serial as in `/sys/block/<dev>/device/serial`.
	Serial string `protobuf:"bytes,5,opt,name=serial,proto3" json:"serial,omitempty"`
	// Uuid as in `/sys/block/<dev>/device/uuid`.
	Uuid string `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Wwid as in `/sys/block/<dev>/device/wwid`.
	Wwid string `protobuf:"bytes,8,opt,name=wwid,proto3" json:"wwid,omitempty"`
	// Type is a type of the disk: nvme, ssd, hdd, sd card.
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// BusPath is the bus path of the disk.
	BusPath string `protobuf:"bytes,10,opt,name=bus_path,json=busPath,proto3" json:"bus_path,omitempty"`
	// SystemDisk is the system disk flag.
	SystemDisk bool `protobuf:"varint,11,opt,name=system_disk,json=systemDisk,proto3" json:"system_disk,omitempty"`
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) Reset() {
	*x = MachineStatusSpec_HardwareStatus_BlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_HardwareStatus_BlockDevice) ProtoMessage() {}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_HardwareStatus_BlockDevice.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_HardwareStatus_BlockDevice) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetLinuxName() string {
	if x != nil {
		return x.LinuxName
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetWwid() string {
	if x != nil {
		return x.Wwid
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetBusPath() string {
	if x != nil {
		return x.BusPath
	}
	return ""
}

func (x *MachineStatusSpec_HardwareStatus_BlockDevice) GetSystemDisk() bool {
	if x != nil {
		return x.SystemDisk
	}
	return false
}

// Physical network interfaces.
type MachineStatusSpec_NetworkStatus_NetworkLinkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Linux interface name.
	LinuxName string `protobuf:"bytes,1,opt,name=linux_name,json=linuxName,proto3" json:"linux_name,omitempty"`
	// MAC address.
	HardwareAddress string `protobuf:"bytes,2,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty"`
	// Speed in Mbps.
	SpeedMbps uint32 `protobuf:"varint,3,opt,name=speed_mbps,json=speedMbps,proto3" json:"speed_mbps,omitempty"`
	// Link status.
	LinkUp bool `protobuf:"varint,4,opt,name=link_up,json=linkUp,proto3" json:"link_up,omitempty"`
	// Hardware description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) Reset() {
	*x = MachineStatusSpec_NetworkStatus_NetworkLinkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStatusSpec_NetworkStatus_NetworkLinkStatus) ProtoMessage() {}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStatusSpec_NetworkStatus_NetworkLinkStatus.ProtoReflect.Descriptor instead.
func (*MachineStatusSpec_NetworkStatus_NetworkLinkStatus) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) GetLinuxName() string {
	if x != nil {
		return x.LinuxName
	}
	return ""
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) GetHardwareAddress() string {
	if x != nil {
		return x.HardwareAddress
	}
	return ""
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) GetSpeedMbps() uint32 {
	if x != nil {
		return x.SpeedMbps
	}
	return 0
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) GetLinkUp() bool {
	if x != nil {
		return x.LinkUp
	}
	return false
}

func (x *MachineStatusSpec_NetworkStatus_NetworkLinkStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ClusterSpec_Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EnableWorkloadProxy enables workload proxy.
	EnableWorkloadProxy bool `protobuf:"varint,1,opt,name=enable_workload_proxy,json=enableWorkloadProxy,proto3" json:"enable_workload_proxy,omitempty"`
	// DiskEncryption enables disk encryption on all nodes.
	DiskEncryption bool `protobuf:"varint,2,opt,name=disk_encryption,json=diskEncryption,proto3" json:"disk_encryption,omitempty"`
}

func (x *ClusterSpec_Features) Reset() {
	*x = ClusterSpec_Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpec_Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpec_Features) ProtoMessage() {}

func (x *ClusterSpec_Features) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpec_Features.ProtoReflect.Descriptor instead.
func (*ClusterSpec_Features) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ClusterSpec_Features) GetEnableWorkloadProxy() bool {
	if x != nil {
		return x.EnableWorkloadProxy
	}
	return false
}

func (x *ClusterSpec_Features) GetDiskEncryption() bool {
	if x != nil {
		return x.DiskEncryption
	}
	return false
}

type MachineSetSpec_MachineClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name defines the machine class id to select the machines from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MachineCount defines fixed amount of the machines to allocated from the machine class.
	MachineCount uint32 `protobuf:"varint,2,opt,name=machine_count,json=machineCount,proto3" json:"machine_count,omitempty"`
	// AllocationType defines special constants for the amount of machines to be allocated.
	AllocationType MachineSetSpec_MachineClass_AllocationType `protobuf:"varint,3,opt,name=allocation_type,json=allocationType,proto3,enum=specs.MachineSetSpec_MachineClass_AllocationType" json:"allocation_type,omitempty"`
}

func (x *MachineSetSpec_MachineClass) Reset() {
	*x = MachineSetSpec_MachineClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSetSpec_MachineClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSetSpec_MachineClass) ProtoMessage() {}

func (x *MachineSetSpec_MachineClass) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSetSpec_MachineClass.ProtoReflect.Descriptor instead.
func (*MachineSetSpec_MachineClass) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{35, 0}
}

func (x *MachineSetSpec_MachineClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineSetSpec_MachineClass) GetMachineCount() uint32 {
	if x != nil {
		return x.MachineCount
	}
	return 0
}

func (x *MachineSetSpec_MachineClass) GetAllocationType() MachineSetSpec_MachineClass_AllocationType {
	if x != nil {
		return x.AllocationType
	}
	return MachineSetSpec_MachineClass_Static
}

// BootstrapSpec defines the bootstrap spec for the control plane machine set.
// It can contain a reference to an etcd backup, which can be used to bootstrap etcd.
type MachineSetSpec_BootstrapSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClusterUuid is the UUID of the cluster to bootstrap. It can be obtained via `omnictl get clusteruuid <cluster-name>`
	ClusterUuid string `protobuf:"bytes,1,opt,name=cluster_uuid,json=clusterUuid,proto3" json:"cluster_uuid,omitempty"`
	// Snapshot is the file name of the etcd snapshot to restore from. It follows the format similar to `FFFFFFFFFFFFFFFF.snapshot`.
	Snapshot string `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *MachineSetSpec_BootstrapSpec) Reset() {
	*x = MachineSetSpec_BootstrapSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSetSpec_BootstrapSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSetSpec_BootstrapSpec) ProtoMessage() {}

func (x *MachineSetSpec_BootstrapSpec) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSetSpec_BootstrapSpec.ProtoReflect.Descriptor instead.
func (*MachineSetSpec_BootstrapSpec) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{35, 1}
}

func (x *MachineSetSpec_BootstrapSpec) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *MachineSetSpec_BootstrapSpec) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type ControlPlaneStatusSpec_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ConditionType                             `protobuf:"varint,1,opt,name=type,proto3,enum=specs.ConditionType" json:"type,omitempty"`
	Reason   string                                    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Status   ControlPlaneStatusSpec_Condition_Status   `protobuf:"varint,3,opt,name=status,proto3,enum=specs.ControlPlaneStatusSpec_Condition_Status" json:"status,omitempty"`
	Severity ControlPlaneStatusSpec_Condition_Severity `protobuf:"varint,4,opt,name=severity,proto3,enum=specs.ControlPlaneStatusSpec_Condition_Severity" json:"severity,omitempty"`
}

func (x *ControlPlaneStatusSpec_Condition) Reset() {
	*x = ControlPlaneStatusSpec_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneStatusSpec_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneStatusSpec_Condition) ProtoMessage() {}

func (x *ControlPlaneStatusSpec_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneStatusSpec_Condition.ProtoReflect.Descriptor instead.
func (*ControlPlaneStatusSpec_Condition) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{41, 0}
}

func (x *ControlPlaneStatusSpec_Condition) GetType() ConditionType {
	if x != nil {
		return x.Type
	}
	return ConditionType_UnknownCondition
}

func (x *ControlPlaneStatusSpec_Condition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ControlPlaneStatusSpec_Condition) GetStatus() ControlPlaneStatusSpec_Condition_Status {
	if x != nil {
		return x.Status
	}
	return ControlPlaneStatusSpec_Condition_Unknown
}

func (x *ControlPlaneStatusSpec_Condition) GetSeverity() ControlPlaneStatusSpec_Condition_Severity {
	if x != nil {
		return x.Severity
	}
	return ControlPlaneStatusSpec_Condition_Info
}

type KubernetesStatusSpec_NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodename       string `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
	KubeletVersion string `protobuf:"bytes,2,opt,name=kubelet_version,json=kubeletVersion,proto3" json:"kubelet_version,omitempty"`
	Ready          bool   `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *KubernetesStatusSpec_NodeStatus) Reset() {
	*x = KubernetesStatusSpec_NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatusSpec_NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatusSpec_NodeStatus) ProtoMessage() {}

func (x *KubernetesStatusSpec_NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatusSpec_NodeStatus.ProtoReflect.Descriptor instead.
func (*KubernetesStatusSpec_NodeStatus) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{43, 0}
}

func (x *KubernetesStatusSpec_NodeStatus) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *KubernetesStatusSpec_NodeStatus) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *KubernetesStatusSpec_NodeStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type KubernetesStatusSpec_StaticPodStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App     string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Ready   bool   `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *KubernetesStatusSpec_StaticPodStatus) Reset() {
	*x = KubernetesStatusSpec_StaticPodStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatusSpec_StaticPodStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatusSpec_StaticPodStatus) ProtoMessage() {}

func (x *KubernetesStatusSpec_StaticPodStatus) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatusSpec_StaticPodStatus.ProtoReflect.Descriptor instead.
func (*KubernetesStatusSpec_StaticPodStatus) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{43, 1}
}

func (x *KubernetesStatusSpec_StaticPodStatus) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *KubernetesStatusSpec_StaticPodStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KubernetesStatusSpec_StaticPodStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type KubernetesStatusSpec_NodeStaticPods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodename   string                                  `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
	StaticPods []*KubernetesStatusSpec_StaticPodStatus `protobuf:"bytes,2,rep,name=static_pods,json=staticPods,proto3" json:"static_pods,omitempty"`
}

func (x *KubernetesStatusSpec_NodeStaticPods) Reset() {
	*x = KubernetesStatusSpec_NodeStaticPods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesStatusSpec_NodeStaticPods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesStatusSpec_NodeStaticPods) ProtoMessage() {}

func (x *KubernetesStatusSpec_NodeStaticPods) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesStatusSpec_NodeStaticPods.ProtoReflect.Descriptor instead.
func (*KubernetesStatusSpec_NodeStaticPods) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{43, 2}
}

func (x *KubernetesStatusSpec_NodeStaticPods) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *KubernetesStatusSpec_NodeStaticPods) GetStaticPods() []*KubernetesStatusSpec_StaticPodStatus {
	if x != nil {
		return x.StaticPods
	}
	return nil
}

type KubernetesUsageSpec_Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests float64 `protobuf:"fixed64,1,opt,name=requests,proto3" json:"requests,omitempty"`
	Limits   float64 `protobuf:"fixed64,2,opt,name=limits,proto3" json:"limits,omitempty"`
	Capacity float64 `protobuf:"fixed64,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *KubernetesUsageSpec_Quantity) Reset() {
	*x = KubernetesUsageSpec_Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesUsageSpec_Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesUsageSpec_Quantity) ProtoMessage() {}

func (x *KubernetesUsageSpec_Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesUsageSpec_Quantity.ProtoReflect.Descriptor instead.
func (*KubernetesUsageSpec_Quantity) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{56, 0}
}

func (x *KubernetesUsageSpec_Quantity) GetRequests() float64 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *KubernetesUsageSpec_Quantity) GetLimits() float64 {
	if x != nil {
		return x.Limits
	}
	return 0
}

func (x *KubernetesUsageSpec_Quantity) GetCapacity() float64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type KubernetesUsageSpec_Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Capacity int32 `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *KubernetesUsageSpec_Pod) Reset() {
	*x = KubernetesUsageSpec_Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesUsageSpec_Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesUsageSpec_Pod) ProtoMessage() {}

func (x *KubernetesUsageSpec_Pod) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesUsageSpec_Pod.ProtoReflect.Descriptor instead.
func (*KubernetesUsageSpec_Pod) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{56, 1}
}

func (x *KubernetesUsageSpec_Pod) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *KubernetesUsageSpec_Pod) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type ImagePullRequestSpec_NodeImageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node   string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Images []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ImagePullRequestSpec_NodeImageList) Reset() {
	*x = ImagePullRequestSpec_NodeImageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_omni_specs_omni_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePullRequestSpec_NodeImageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullRequestSpec_NodeImageList) ProtoMessage() {}

func (x *ImagePullRequestSpec_NodeImageList) ProtoReflect() protoreflect.Message {
	mi := &file_omni_specs_omni_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullRequestSpec_NodeImageList.ProtoReflect.Descriptor instead.
func (*ImagePullRequestSpec_NodeImageList) Descriptor() ([]byte, []int) {
	return file_omni_specs_omni_proto_rawDescGZIP(), []int{57, 0}
}

func (x *ImagePullRequestSpec_NodeImageList) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ImagePullRequestSpec_NodeImageList) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

var File_omni_specs_omni_proto protoreflect.FileDescriptor

var file_omni_specs_omni_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6f, 0x6d, 0x6e, 0x69, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2f, 0x6f, 0x6d, 0x6e,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x1a, 0x1b,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x0b,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x22, 0x8d, 0x11, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61,
	0x6c, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xa9, 0x06, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x1a, 0xb1, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x1a, 0x49, 0x0a, 0x0c, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69,
	0x7a, 0x65, 0x4d, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfa, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x77, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x77, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x69, 0x73, 0x6b, 0x1a, 0xad, 0x03, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x11, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x55,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xf1, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04,
	0x08, 0x0c, 0x10, 0x0d, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x61, 0x6c, 0x6f, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf6, 0x02, 0x0a, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x67, 0x0a, 0x08, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0e, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x18, 0x45, 0x74, 0x63, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x2c, 0x0a, 0x10, 0x45, 0x74,
	0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x0e, 0x45, 0x74, 0x63, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x65, 0x73,
	0x5f, 0x63, 0x62, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x65,
	0x73, 0x43, 0x62, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x62, 0x6f,
	0x78, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x62, 0x6f, 0x78, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb1,
	0x02, 0x0a, 0x14, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e,
	0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x35, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x22, 0x4f, 0x0a, 0x14, 0x45, 0x74, 0x63, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x74, 0x22, 0x7b, 0x0a, 0x19, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x49, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x2e, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x3b, 0x0a, 0x1f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x6c, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x91, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x20, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x1a,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x74, 0x63, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x74, 0x63, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x73, 0x22, 0xa9, 0x01, 0x0a,
	0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x8b, 0x04, 0x0a, 0x18, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x64,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x70, 0x69, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x4f, 0x59, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0x76, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x9e,
	0x03, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x05, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22,
	0x21, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x02, 0x0a, 0x1e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x1e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x6c, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x40, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x69, 0x64, 0x65, 0x72, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x64, 0x65, 0x72,
	0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0x58, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x31, 0x0a, 0x15, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72,
	0x0a, 0x10, 0x54, 0x61, 0x6c, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xc1, 0x04, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x4a,
	0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x1a, 0xd0, 0x01, 0x0a, 0x0c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x4e, 0x0a,
	0x0d, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x28, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x22, 0xf4, 0x02, 0x0a, 0x16, 0x54, 0x61, 0x6c, 0x6f,
	0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6f, 0x73, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0x87,
	0x02, 0x0a, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x47, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x22, 0x13,
	0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x22, 0x5f, 0x0a, 0x19, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc1, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x2e,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x22, 0x2c,
	0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x22, 0x48, 0x0a, 0x13,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xdb, 0x03, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x3c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x73, 0x1a, 0x67, 0x0a, 0x0a, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x1a, 0x53, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x1a, 0x7a, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x6f, 0x64, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x1b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x05, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0x6f, 0x0a, 0x23, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x74, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x74,
	0x61, 0x6c, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6f, 0x73,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f,
	0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22,
	0x9b, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x4b, 0x0a, 0x14, 0x65, 0x74, 0x63, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x65, 0x74, 0x63, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd6, 0x01,
	0x0a, 0x12, 0x45, 0x74, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x35, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x40, 0x0a,
	0x1b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x22,
	0x3b, 0x0a, 0x13, 0x45, 0x74, 0x63, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x74, 0x63, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x65, 0x74, 0x63, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0e,
	0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8b, 0x03, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x37, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x22, 0xa6, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x0f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x46, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x7a, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x2a, 0x48, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x6f, 0x6d, 0x6e, 0x69, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x6d, 0x6e, 0x69, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_omni_specs_omni_proto_rawDescOnce sync.Once
	file_omni_specs_omni_proto_rawDescData = file_omni_specs_omni_proto_rawDesc
)

func file_omni_specs_omni_proto_rawDescGZIP() []byte {
	file_omni_specs_omni_proto_rawDescOnce.Do(func() {
		file_omni_specs_omni_proto_rawDescData = protoimpl.X.CompressGZIP(file_omni_specs_omni_proto_rawDescData)
	})
	return file_omni_specs_omni_proto_rawDescData
}

var file_omni_specs_omni_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_omni_specs_omni_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_omni_specs_omni_proto_goTypes = []interface{}{
	(ConfigApplyStatus)(0),                          // 0: specs.ConfigApplyStatus
	(MachineSetPhase)(0),                            // 1: specs.MachineSetPhase
	(ConditionType)(0),                              // 2: specs.ConditionType
	(MachineStatusSpec_Role)(0),                     // 3: specs.MachineStatusSpec.Role
	(EtcdBackupStatusSpec_Status)(0),                // 4: specs.EtcdBackupStatusSpec.Status
	(ClusterMachineStatusSpec_Stage)(0),             // 5: specs.ClusterMachineStatusSpec.Stage
	(ClusterStatusSpec_Phase)(0),                    // 6: specs.ClusterStatusSpec.Phase
	(MachineSetSpec_UpdateStrategy)(0),              // 7: specs.MachineSetSpec.UpdateStrategy
	(MachineSetSpec_MachineClass_AllocationType)(0), // 8: specs.MachineSetSpec.MachineClass.AllocationType
	(TalosUpgradeStatusSpec_Phase)(0),               // 9: specs.TalosUpgradeStatusSpec.Phase
	(ControlPlaneStatusSpec_Condition_Status)(0),    // 10: specs.ControlPlaneStatusSpec.Condition.Status
	(ControlPlaneStatusSpec_Condition_Severity)(0),  // 11: specs.ControlPlaneStatusSpec.Condition.Severity
	(KubernetesUpgradeStatusSpec_Phase)(0),          // 12: specs.KubernetesUpgradeStatusSpec.Phase
	(*MachineSpec)(nil),                             // 13: specs.MachineSpec
	(*MachineStatusSpec)(nil),                       // 14: specs.MachineStatusSpec
	(*TalosConfigSpec)(nil),                         // 15: specs.TalosConfigSpec
	(*ClusterSpec)(nil),                             // 16: specs.ClusterSpec
	(*EtcdBackupConf)(nil),                          // 17: specs.EtcdBackupConf
	(*EtcdBackupEncryptionSpec)(nil),                // 18: specs.EtcdBackupEncryptionSpec
	(*EtcdBackupHeader)(nil),                        // 19: specs.EtcdBackupHeader
	(*EtcdBackupSpec)(nil),                          // 20: specs.EtcdBackupSpec
	(*BackupDataSpec)(nil),                          // 21: specs.BackupDataSpec
	(*EtcdBackupS3ConfSpec)(nil),                    // 22: specs.EtcdBackupS3ConfSpec
	(*EtcdBackupStatusSpec)(nil),                    // 23: specs.EtcdBackupStatusSpec
	(*EtcdManualBackupSpec)(nil),                    // 24: specs.EtcdManualBackupSpec
	(*EtcdBackupStoreStatusSpec)(nil),               // 25: specs.EtcdBackupStoreStatusSpec
	(*EtcdBackupOverallStatusSpec)(nil),             // 26: specs.EtcdBackupOverallStatusSpec
	(*ClusterMachineSpec)(nil),                      // 27: specs.ClusterMachineSpec
	(*ClusterMachineConfigPatchesSpec)(nil),         // 28: specs.ClusterMachineConfigPatchesSpec
	(*ClusterMachineTalosVersionSpec)(nil),          // 29: specs.ClusterMachineTalosVersionSpec
	(*ClusterMachineConfigSpec)(nil),                // 30: specs.ClusterMachineConfigSpec
	(*RedactedClusterMachineConfigSpec)(nil),        // 31: specs.RedactedClusterMachineConfigSpec
	(*ClusterMachineIdentitySpec)(nil),              // 32: specs.ClusterMachineIdentitySpec
	(*ClusterMachineTemplateSpec)(nil),              // 33: specs.ClusterMachineTemplateSpec
	(*ClusterMachineStatusSpec)(nil),                // 34: specs.ClusterMachineStatusSpec
	(*Machines)(nil),                                // 35: specs.Machines
	(*ClusterStatusSpec)(nil),                       // 36: specs.ClusterStatusSpec
	(*ClusterUUID)(nil),                             // 37: specs.ClusterUUID
	(*ClusterConfigVersionSpec)(nil),                // 38: specs.ClusterConfigVersionSpec
	(*ClusterMachineConfigStatusSpec)(nil),          // 39: specs.ClusterMachineConfigStatusSpec
	(*ClusterBootstrapStatusSpec)(nil),              // 40: specs.ClusterBootstrapStatusSpec
	(*ClusterSecretsSpec)(nil),                      // 41: specs.ClusterSecretsSpec
	(*LoadBalancerConfigSpec)(nil),                  // 42: specs.LoadBalancerConfigSpec
	(*LoadBalancerStatusSpec)(nil),                  // 43: specs.LoadBalancerStatusSpec
	(*KubernetesVersionSpec)(nil),                   // 44: specs.KubernetesVersionSpec
	(*TalosVersionSpec)(nil),                        // 45: specs.TalosVersionSpec
	(*InstallationMediaSpec)(nil),                   // 46: specs.InstallationMediaSpec
	(*ConfigPatchSpec)(nil),                         // 47: specs.ConfigPatchSpec
	(*MachineSetSpec)(nil),                          // 48: specs.MachineSetSpec
	(*TalosUpgradeStatusSpec)(nil),                  // 49: specs.TalosUpgradeStatusSpec
	(*MachineSetStatusSpec)(nil),                    // 50: specs.MachineSetStatusSpec
	(*MachineSetNodeSpec)(nil),                      // 51: specs.MachineSetNodeSpec
	(*MachineLabelsSpec)(nil),                       // 52: specs.MachineLabelsSpec
	(*MachineStatusSnapshotSpec)(nil),               // 53: specs.MachineStatusSnapshotSpec
	(*ControlPlaneStatusSpec)(nil),                  // 54: specs.ControlPlaneStatusSpec
	(*ClusterEndpointSpec)(nil),                     // 55: specs.ClusterEndpointSpec
	(*KubernetesStatusSpec)(nil),                    // 56: specs.KubernetesStatusSpec
	(*KubernetesUpgradeStatusSpec)(nil),             // 57: specs.KubernetesUpgradeStatusSpec
	(*KubernetesUpgradeManifestStatusSpec)(nil),     // 58: specs.KubernetesUpgradeManifestStatusSpec
	(*DestroyStatusSpec)(nil),                       // 59: specs.DestroyStatusSpec
	(*OngoingTaskSpec)(nil),                         // 60: specs.OngoingTaskSpec
	(*ClusterMachineEncryptionKeySpec)(nil),         // 61: specs.ClusterMachineEncryptionKeySpec
	(*ExposedServiceSpec)(nil),                      // 62: specs.ExposedServiceSpec
	(*FeaturesConfigSpec)(nil),                      // 63: specs.FeaturesConfigSpec
	(*EtcdBackupSettings)(nil),                      // 64: specs.EtcdBackupSettings
	(*MachineClassSpec)(nil),                        // 65: specs.MachineClassSpec
	(*MachineConfigGenOptionsSpec)(nil),             // 66: specs.MachineConfigGenOptionsSpec
	(*EtcdAuditResultSpec)(nil),                     // 67: specs.EtcdAuditResultSpec
	(*KubeconfigSpec)(nil),                          // 68: specs.KubeconfigSpec
	(*KubernetesUsageSpec)(nil),                     // 69: specs.KubernetesUsageSpec
	(*ImagePullRequestSpec)(nil),                    // 70: specs.ImagePullRequestSpec
	(*ImagePullStatusSpec)(nil),                     // 71: specs.ImagePullStatusSpec
	(*MachineStatusSpec_HardwareStatus)(nil),        // 72: specs.MachineStatusSpec.HardwareStatus
	(*MachineStatusSpec_NetworkStatus)(nil),         // 73: specs.MachineStatusSpec.NetworkStatus
	(*MachineStatusSpec_PlatformMetadata)(nil),      // 74: specs.MachineStatusSpec.PlatformMetadata
	nil, // 75: specs.MachineStatusSpec.ImageLabelsEntry
	(*MachineStatusSpec_HardwareStatus_Processor)(nil),        // 76: specs.MachineStatusSpec.HardwareStatus.Processor
	(*MachineStatusSpec_HardwareStatus_MemoryModule)(nil),     // 77: specs.MachineStatusSpec.HardwareStatus.MemoryModule
	(*MachineStatusSpec_HardwareStatus_BlockDevice)(nil),      // 78: specs.MachineStatusSpec.HardwareStatus.BlockDevice
	(*MachineStatusSpec_NetworkStatus_NetworkLinkStatus)(nil), // 79: specs.MachineStatusSpec.NetworkStatus.NetworkLinkStatus
	(*ClusterSpec_Features)(nil),                              // 80: specs.ClusterSpec.Features
	(*MachineSetSpec_MachineClass)(nil),                       // 81: specs.MachineSetSpec.MachineClass
	(*MachineSetSpec_BootstrapSpec)(nil),                      // 82: specs.MachineSetSpec.BootstrapSpec
	(*ControlPlaneStatusSpec_Condition)(nil),                  // 83: specs.ControlPlaneStatusSpec.Condition
	(*KubernetesStatusSpec_NodeStatus)(nil),                   // 84: specs.KubernetesStatusSpec.NodeStatus
	(*KubernetesStatusSpec_StaticPodStatus)(nil),              // 85: specs.KubernetesStatusSpec.StaticPodStatus
	(*KubernetesStatusSpec_NodeStaticPods)(nil),               // 86: specs.KubernetesStatusSpec.NodeStaticPods
	(*KubernetesUsageSpec_Quantity)(nil),                      // 87: specs.KubernetesUsageSpec.Quantity
	(*KubernetesUsageSpec_Pod)(nil),                           // 88: specs.KubernetesUsageSpec.Pod
	(*ImagePullRequestSpec_NodeImageList)(nil),                // 89: specs.ImagePullRequestSpec.NodeImageList
	(*durationpb.Duration)(nil),                               // 90: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                             // 91: google.protobuf.Timestamp
	(*machine.MachineStatusEvent)(nil),                        // 92: machine.MachineStatusEvent
}
var file_omni_specs_omni_proto_depIdxs = []int32{
	72, // 0: specs.MachineStatusSpec.hardware:type_name -> specs.MachineStatusSpec.HardwareStatus
	73, // 1: specs.MachineStatusSpec.network:type_name -> specs.MachineStatusSpec.NetworkStatus
	3,  // 2: specs.MachineStatusSpec.role:type_name -> specs.MachineStatusSpec.Role
	74, // 3: specs.MachineStatusSpec.platform_metadata:type_name -> specs.MachineStatusSpec.PlatformMetadata
	75, // 4: specs.MachineStatusSpec.image_labels:type_name -> specs.MachineStatusSpec.ImageLabelsEntry
	80, // 5: specs.ClusterSpec.features:type_name -> specs.ClusterSpec.Features
	17, // 6: specs.ClusterSpec.backup_configuration:type_name -> specs.EtcdBackupConf
	90, // 7: specs.EtcdBackupConf.interval:type_name -> google.protobuf.Duration
	91, // 8: specs.EtcdBackupSpec.created_at:type_name -> google.protobuf.Timestamp
	90, // 9: specs.BackupDataSpec.interval:type_name -> google.protobuf.Duration
	4,  // 10: specs.EtcdBackupStatusSpec.status:type_name -> specs.EtcdBackupStatusSpec.Status
	91, // 11: specs.EtcdBackupStatusSpec.last_backup_time:type_name -> google.protobuf.Timestamp
	91, // 12: specs.EtcdBackupStatusSpec.last_backup_attempt:type_name -> google.protobuf.Timestamp
	91, // 13: specs.EtcdManualBackupSpec.backup_at:type_name -> google.protobuf.Timestamp
	23, // 14: specs.EtcdBackupOverallStatusSpec.last_backup_status:type_name -> specs.EtcdBackupStatusSpec
	5,  // 15: specs.ClusterMachineStatusSpec.stage:type_name -> specs.ClusterMachineStatusSpec.Stage
	0,  // 16: specs.ClusterMachineStatusSpec.config_apply_status:type_name -> specs.ConfigApplyStatus
	35, // 17: specs.ClusterStatusSpec.machines:type_name -> specs.Machines
	6,  // 18: specs.ClusterStatusSpec.phase:type_name -> specs.ClusterStatusSpec.Phase
	7,  // 19: specs.MachineSetSpec.update_strategy:type_name -> specs.MachineSetSpec.UpdateStrategy
	81, // 20: specs.MachineSetSpec.machine_class:type_name -> specs.MachineSetSpec.MachineClass
	82, // 21: specs.MachineSetSpec.bootstrap_spec:type_name -> specs.MachineSetSpec.BootstrapSpec
	9,  // 22: specs.TalosUpgradeStatusSpec.phase:type_name -> specs.TalosUpgradeStatusSpec.Phase
	1,  // 23: specs.MachineSetStatusSpec.phase:type_name -> specs.MachineSetPhase
	35, // 24: specs.MachineSetStatusSpec.machines:type_name -> specs.Machines
	81, // 25: specs.MachineSetStatusSpec.machine_class:type_name -> specs.MachineSetSpec.MachineClass
	92, // 26: specs.MachineStatusSnapshotSpec.machine_status:type_name -> machine.MachineStatusEvent
	83, // 27: specs.ControlPlaneStatusSpec.conditions:type_name -> specs.ControlPlaneStatusSpec.Condition
	84, // 28: specs.KubernetesStatusSpec.nodes:type_name -> specs.KubernetesStatusSpec.NodeStatus
	86, // 29: specs.KubernetesStatusSpec.static_pods:type_name -> specs.KubernetesStatusSpec.NodeStaticPods
	12, // 30: specs.KubernetesUpgradeStatusSpec.phase:type_name -> specs.KubernetesUpgradeStatusSpec.Phase
	49, // 31: specs.OngoingTaskSpec.talos_upgrade:type_name -> specs.TalosUpgradeStatusSpec
	57, // 32: specs.OngoingTaskSpec.kubernetes_upgrade:type_name -> specs.KubernetesUpgradeStatusSpec
	59, // 33: specs.OngoingTaskSpec.destroy:type_name -> specs.DestroyStatusSpec
	64, // 34: specs.FeaturesConfigSpec.etcd_backup_settings:type_name -> specs.EtcdBackupSettings
	90, // 35: specs.EtcdBackupSettings.tick_interval:type_name -> google.protobuf.Duration
	90, // 36: specs.EtcdBackupSettings.min_interval:type_name -> google.protobuf.Duration
	90, // 37: specs.EtcdBackupSettings.max_interval:type_name -> google.protobuf.Duration
	87, // 38: specs.KubernetesUsageSpec.cpu:type_name -> specs.KubernetesUsageSpec.Quantity
	87, // 39: specs.KubernetesUsageSpec.mem:type_name -> specs.KubernetesUsageSpec.Quantity
	87, // 40: specs.KubernetesUsageSpec.storage:type_name -> specs.KubernetesUsageSpec.Quantity
	88, // 41: specs.KubernetesUsageSpec.pods:type_name -> specs.KubernetesUsageSpec.Pod
	89, // 42: specs.ImagePullRequestSpec.node_image_list:type_name -> specs.ImagePullRequestSpec.NodeImageList
	76, // 43: specs.MachineStatusSpec.HardwareStatus.processors:type_name -> specs.MachineStatusSpec.HardwareStatus.Processor
	77, // 44: specs.MachineStatusSpec.HardwareStatus.memory_modules:type_name -> specs.MachineStatusSpec.HardwareStatus.MemoryModule
	78, // 45: specs.MachineStatusSpec.HardwareStatus.blockdevices:type_name -> specs.MachineStatusSpec.HardwareStatus.BlockDevice
	79, // 46: specs.MachineStatusSpec.NetworkStatus.network_links:type_name -> specs.MachineStatusSpec.NetworkStatus.NetworkLinkStatus
	8,  // 47: specs.MachineSetSpec.MachineClass.allocation_type:type_name -> specs.MachineSetSpec.MachineClass.AllocationType
	2,  // 48: specs.ControlPlaneStatusSpec.Condition.type:type_name -> specs.ConditionType
	10, // 49: specs.ControlPlaneStatusSpec.Condition.status:type_name -> specs.ControlPlaneStatusSpec.Condition.Status
	11, // 50: specs.ControlPlaneStatusSpec.Condition.severity:type_name -> specs.ControlPlaneStatusSpec.Condition.Severity
	85, // 51: specs.KubernetesStatusSpec.NodeStaticPods.static_pods:type_name -> specs.KubernetesStatusSpec.StaticPodStatus
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_omni_specs_omni_proto_init() }
func file_omni_specs_omni_proto_init() {
	if File_omni_specs_omni_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_omni_specs_omni_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalosConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupEncryptionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDataSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupS3ConfSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdManualBackupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupStoreStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupOverallStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineConfigPatchesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineTalosVersionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactedClusterMachineConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineIdentitySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigVersionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineConfigStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterBootstrapStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSecretsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesVersionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalosVersionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallationMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigPatchSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalosUpgradeStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSetStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSetNodeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineLabelsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSnapshotSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterEndpointSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesUpgradeStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesUpgradeManifestStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingTaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineEncryptionKeySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposedServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturesConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdBackupSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineClassSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConfigGenOptionsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdAuditResultSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeconfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesUsageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePullRequestSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePullStatusSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_HardwareStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_NetworkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_PlatformMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_HardwareStatus_Processor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_HardwareStatus_MemoryModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_HardwareStatus_BlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineStatusSpec_NetworkStatus_NetworkLinkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSpec_Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSetSpec_MachineClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSetSpec_BootstrapSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneStatusSpec_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatusSpec_NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatusSpec_StaticPodStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesStatusSpec_NodeStaticPods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesUsageSpec_Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesUsageSpec_Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_omni_specs_omni_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePullRequestSpec_NodeImageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_omni_specs_omni_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*OngoingTaskSpec_TalosUpgrade)(nil),
		(*OngoingTaskSpec_KubernetesUpgrade)(nil),
		(*OngoingTaskSpec_Destroy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_omni_specs_omni_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_omni_specs_omni_proto_goTypes,
		DependencyIndexes: file_omni_specs_omni_proto_depIdxs,
		EnumInfos:         file_omni_specs_omni_proto_enumTypes,
		MessageInfos:      file_omni_specs_omni_proto_msgTypes,
	}.Build()
	File_omni_specs_omni_proto = out.File
	file_omni_specs_omni_proto_rawDesc = nil
	file_omni_specs_omni_proto_goTypes = nil
	file_omni_specs_omni_proto_depIdxs = nil
}
